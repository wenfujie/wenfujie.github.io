<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html5拖放</title>
      <link href="/2021/03/01/http%E5%8D%8F%E8%AE%AE/"/>
      <url>/2021/03/01/http%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一面要讲的内容：</p><ul><li><p>HTTP协议的主要特点</p></li><li><p>HTTP报文的组成部分</p></li><li><p>HTTP方法</p></li><li><p>get 和 post的区别</p></li><li><p>HTTP状态码</p></li><li><p>什么是持久连接</p></li><li><p>什么是管线化</p></li></ul><p>二面要讲的内容；</p><ul><li><p>缓存</p></li><li><p>CSRF攻击</p></li></ul><h2 id="HTTP协议的主要特点"><a href="#HTTP协议的主要特点" class="headerlink" title="HTTP协议的主要特点"></a>HTTP协议的主要特点</h2><ul><li><p>简单快速</p></li><li><p>灵活</p></li><li><p><strong>无连接</strong></p></li><li><p><strong>无状态</strong></p></li></ul><p>通常我们要答出以上四个内容。如果实在记不住，一定要记得后面的两个： <strong>无连接、无状态</strong> 。</p><p>我们分别来解释一下。</p><h3 id="简单快速"><a href="#简单快速" class="headerlink" title="简单快速"></a>简单快速</h3><p><strong>简单</strong> ：每个资源（比如图片、页面）都通过 url 来定位。这都是固定的，在http协议中，处理起来也比较简单，想访问什么资源，直接输入url即可。</p><h3 id="灵活"><a href="#灵活" class="headerlink" title="灵活"></a>灵活</h3><p>http协议的头部有一个<code>数据类型</code>，通过http协议，就可以完成不同数据类型的传输。</p><h3 id="无连接"><a href="#无连接" class="headerlink" title="无连接"></a>无连接</h3><p>连接一次，就会断开，不会继续保持连接。</p><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>客户端和服务器端是两种身份。第一次请求结束后，就断开了，第二次请求时， <strong>服务器端并没有记住之前的状态</strong><br>，也就是说，服务器端无法区分客户端是否为同一个人、同一个身份。</p><p>有的时候，我们访问网站时，网站能记住我们的账号，这个是通过其他的手段（比如 session）做到的，并不是http协议能做到的。</p><h2 id="HTTP报文的组成部分"><a href="#HTTP报文的组成部分" class="headerlink" title="HTTP报文的组成部分"></a>HTTP报文的组成部分</h2><p><a href="https://camo.githubusercontent.com/3776b3dd209ee8fb439e9cc7a718e1d96a9961b1d9249ddd2807e6776b3ba72d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313430302e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/3776b3dd209ee8fb439e9cc7a718e1d96a9961b1d9249ddd2807e6776b3ba72d/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313430302e706e67" alt></a></p><p>在回答此问题时，我们要按照顺序回答：</p><ul><li><p>先回答的是，http报文包括： <strong>请求报文</strong> 和 <strong>响应报文</strong> 。</p></li><li><p>再回答的是，每个报文包含什么部分。</p></li><li><p>最后回答，每个部分的内容是什么</p></li></ul><h3 id="请求报文包括："><a href="#请求报文包括：" class="headerlink" title="请求报文包括："></a>请求报文包括：</h3><p><a href="https://camo.githubusercontent.com/3cdd2cfe28502eb329d61b00f68bf4be6d1d7b93ce55c85b02563cc1ed846efa/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313530352e6a7067" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/3cdd2cfe28502eb329d61b00f68bf4be6d1d7b93ce55c85b02563cc1ed846efa/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313530352e6a7067" alt></a></p><ul><li><p>请求行：包括请求方法、请求的url、http协议及版本。</p></li><li><p>请求头：一大堆的键值对。</p></li><li><p><strong>空行</strong> 指的是：当服务器在解析请求头的时候，如果遇到了空行，则表明，后面的内容是请求体。</p></li><li><p>请求体：数据部分。</p></li></ul><h3 id="响应报文包括："><a href="#响应报文包括：" class="headerlink" title="响应报文包括："></a>响应报文包括：</h3><p><a href="https://camo.githubusercontent.com/5a06f9e21a22759fff5cbd19d73e11cd0e6e79ddf927bb5da379039b7d346f47/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313531302e6a7067" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/5a06f9e21a22759fff5cbd19d73e11cd0e6e79ddf927bb5da379039b7d346f47/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303232385f313531302e6a7067" alt></a></p><ul><li><p>状态行：http协议及版本、状态码及状态描述。</p></li><li><p>响应头</p></li><li><p>空行</p></li><li><p>响应体</p></li></ul><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><p>包括：</p><ul><li><p>GET：获取资源</p></li><li><p>POST：传输资源</p></li><li><p>put：更新资源</p></li><li><p>DELETE：删除资源</p></li><li><p>HEAD：获得报文首部</p></li></ul><p>HTTP方法有很多，但是上面这五个方法，要求在面试时全部说出来，不要漏掉。</p><p>get 和 post 比较常见。</p><p>put 和 delete 在实际应用中用的很少。况且，业务中，一般不删除服务器端的资源。</p><p>head 可能偶尔用的到。</p><h2 id="get-和-post的区别"><a href="#get-和-post的区别" class="headerlink" title="get 和 post的区别"></a>get 和 post的区别</h2><p><a href="https://camo.githubusercontent.com/eb94fc7050d60f1ba087c92805b0b4f5ba3b331fb790e5b5fc3b926f7216e28e/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313431352e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/eb94fc7050d60f1ba087c92805b0b4f5ba3b331fb790e5b5fc3b926f7216e28e/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313431352e706e67" alt></a></p><p>区别有很多，如果记不住，面试时，至少要任意答出其中的三四条。</p><p>有一点要强调， <strong>get是相对不隐私的，而post是相对隐私的</strong> 。</p><p>我们大概要记住以下几点：</p><p>1、浏览器在回退时，get <strong>不会重新请求</strong> ，但是post会重新请求。【重要】</p><p>2、get请求会被浏览器 <strong>主动缓存</strong> ，而post不会。【重要】</p><p>3、get请求的参数，会 <strong>保留</strong> 在浏览器的 <strong>历史记录</strong><br>里，而post不会。做业务时要注意。为了防止CSRF攻击，很多公司把get统一改成了post。</p><p>4、get请求在url中传递的参数有大小限制，基本是2kb，不同的浏览器略有不同。而post没有限制。</p><p>5、get的参数是直接暴露在url上的，相对不安全。而post是放在请求体中的。</p><h2 id="http状态码"><a href="#http状态码" class="headerlink" title="http状态码"></a>http状态码</h2><p>http状态码分类：</p><p><a href="https://camo.githubusercontent.com/f6cb65a6c2747251a830bc7a74cf514bbef7f05e7434f41145ea9b790aadc595/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313433302e706e67" target="_blank" rel="noopener"><img src="https://camo.githubusercontent.com/f6cb65a6c2747251a830bc7a74cf514bbef7f05e7434f41145ea9b790aadc595/687474703a2f2f696d672e736d79687661652e636f6d2f32303138303330365f313433302e706e67" alt></a></p><p>部分解释：</p><ul><li>200 OK，表示从客户端发来的请求在服务器端被正常处理了。</li><li>204 No content ，表示请求处理成功，但没有资源返回。</li><li>301 moved permanently，表示永久性重定向。表示请求的资源被分配了新的URI，以后应使用资源现在所指的URI。</li><li>302 found，表示临时性重定向。</li><li>304 表示客户端发送附带条件的请求时（指采用GET方法的请求报文中包含if-matched,if-modified-since,if-none-match,if-range,if-unmodified-since任一个首部）服务器端允许请求访问资源，但因发生请求未满足条件的情况后，直接返回304Modified（服务器端资源未改变，可直接使用客户端未过期的缓存）</li><li>400 bad request，表示请求报文中存在语法错误。</li><li>401 unauthorized，表示未授权</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝了</li><li>404 not found，表示服务器上无法找到请求的资源。</li><li>500 internal sever error，表示服务器端在执行请求时发生了错误。</li><li>501 Not Implemented，服务器不支持当前请求所需要的某个功能</li><li>503 service unavailable，表示服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</li></ul><h2 id="持久链接-http长连接"><a href="#持久链接-http长连接" class="headerlink" title="持久链接/http长连接"></a>持久链接/http长连接</h2><blockquote><p>如果你能答出持久链接，这是面试官很想知道的一个点。</p></blockquote><ul><li><p><strong>轮询</strong> ：http1.0中，客户端每隔很短的时间，都会对服务器发出请求，查看是否有新的消息，只要轮询速度足够快，例如1秒，就能给人造成交互是实时进行的印象。这种做法是无奈之举，实际上对服务器、客户端双方都造成了大量的性能浪费。</p></li><li><p><strong>长连接</strong> ：HTTP1.1中，通过使用Connection:keep-alive进行长连接，。客户端只请求一次，但是服务器会将继续保持连接，当再次请求时，避免了重新建立连接。</p></li></ul><p>注意，HTTP 1.1默认进行持久连接。在一次 TCP 连接中可以完成多个 HTTP 请求，但是对 <strong>每个请求仍然要单独发 header</strong> ，Keep-<br>Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</p><h2 id="长连接中的管线化"><a href="#长连接中的管线化" class="headerlink" title="长连接中的管线化"></a>长连接中的管线化</h2><blockquote><p>如果能答出 <strong>管线化</strong> ，则属于加分项。</p></blockquote><h3 id="管线化的原理"><a href="#管线化的原理" class="headerlink" title="管线化的原理"></a>管线化的原理</h3><p>长连接时， <strong>默认</strong> 的请求这样的：</p><pre><code>请求1 --&gt; 响应1 --&gt;请求2 --&gt; 响应2 --&gt; 请求3 --&gt; 响应3</code></pre><p>长连接中的管线化，请求是这样的：</p><pre><code>请求1 --&gt; 请求2 --&gt; 请求3 --&gt; 响应1 --&gt; 响应2 --&gt; 响应3</code></pre><p>管线化就是，我把现在的请求打包，一次性发过去，你也给我一次响应回来。</p><h3 id="管线化的注意事项"><a href="#管线化的注意事项" class="headerlink" title="管线化的注意事项"></a>管线化的注意事项</h3><p>面试时，不会深究管线化。如果真要问你，就回答：“我没怎么研究过，准备回去看看~”</p><h2 id="TCP协议"><a href="#TCP协议" class="headerlink" title="TCP协议"></a>TCP协议</h2><p>中文名：传输控制协议（Transmission Control Protocol）。是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p><p>http 和 TCP 的关系？</p><p>http协议是位于应用层，用来定义 request 和 response 的规则，而 TCP 位于传输层，用来传输客户端、服务端的 request、response。</p><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h3><p><strong>含义</strong></p><p>由于TCP是面向连接的，所以客户端和服务端发送数据前要先建立一条连接在TCP/IP协议中，连接建立成功后再开始正式传输数据，TCP三次握手就是用于建立该连接。</p><p><strong>步骤</strong></p><ol><li><p>第一次握手: 客户端发送请求，询问是否同意建立连接</p></li><li><p>第二次握手: 服务器收到信息, 并请求与客户端建立连接</p></li><li><p>第三次握手: 客户端收到信息系, 同意与服务器建立连接</p></li></ol><p><strong>作用</strong></p><p>一、二次握手是为了保证服务端能接收客户端信息并作出应答，二、三次握手是为了保证客户端能接受到服务端信息并做应答。</p><h3 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h3><p><strong>含义</strong></p><p>当数据传输完毕，就需要断开TCP连接，TCP四次挥手就是用于断开TCP连接。</p><p><strong>步骤</strong></p><ol><li><p>第一次分手: 客户端发送断开请求</p></li><li><p>第二次分手: 服务器收到断开请求, 发送同意断开连接的请求</p></li><li><p>第三次分手: 服务器发送请求断开连接</p></li><li><p>第四次分手: 客户端收到, 发送同意断开连接</p></li></ol><h2 id="HTTPS的原理和作用"><a href="#HTTPS的原理和作用" class="headerlink" title="HTTPS的原理和作用"></a>HTTPS的原理和作用</h2><p>HTTPS 还是通过了 HTTP 来传输信息，但是信息通过 TLS 协议进行了加密。</p><p>要讲清楚https，需要知道以下几个知识点</p><ol><li>对称加密与非对称加密的概念</li><li>SSL/TLS 协议的含义</li><li>CA 证书的用途</li></ol><p><strong>对称加密与非对称加密</strong></p><p>秘钥：一种算法</p><p>加密：通过秘钥将明文变成密文的过程</p><p>解密：通过秘钥将密文变成明文的过程</p><p>对称加密：对称加密就是两边拥有相同的秘钥，两边都知道如何将密文加密解密</p><p>非对称加密：有公钥私钥之分，公钥所有人都可以知道，可以将数据用公钥加密，但是将数据解密必须使用私钥解密，私钥只有分发公钥的一方才知道</p><p><strong>SSL/TLS 协议</strong></p><p><strong>作用</strong>：http 协议是明文的，存在传输内容会被偷窥和篡改等问题，SSL协议就是为了解决这些问题。</p><p>1999年，SSL被标准化，标准化后改名为 TLS（Transport Layer Security），中文叫“传输层安全协议”。所以 SSL 和 TLS 指的是同一个东西。</p><p><strong>TLS 握手过程</strong></p><p><a href="https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-043749.jpg" data-fancybox="group" data-caption class="fancybox"><img src="https://yck-1254263422.cos.ap-shanghai.myqcloud.com/blog/2019-06-01-043749.jpg" alt title></a></p><ol><li>客户端发送一个随机值，需要的协议和加密方式</li><li>服务端收到客户端的随机值，自己也产生一个随机值，并根据客户端需求的协议和加密方式来使用对应的方式，发送自己的证书（如果需要验证客户端证书需要说明）</li><li>客户端收到服务端的证书并验证是否有效，验证通过会再生成一个随机值，通过服务端证书的公钥去加密这个随机值并发送给服务端，如果服务端需要验证客户端证书的话会附带证书</li><li>服务端收到加密过的随机值并使用私钥解密获得第三个随机值，这时候两端都拥有了三个随机值，可以通过这三个随机值按照之前约定的加密方式生成密钥，接下来的通信就可以通过该密钥来加密解密</li></ol><p>通过以上步骤可知，在 TLS 握手阶段，两端使用非对称加密的方式来通信，但是因为非对称加密损耗的性能比对称加密大，所以在正式传输数据时，两端使用对称加密的方式通信。</p><h2 id="http1和http2的区别"><a href="#http1和http2的区别" class="headerlink" title="http1和http2的区别"></a>http1和http2的区别</h2><p>http1存在队头阻塞问题（同一个域名下限制最大请求数）。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">传输方式</th><th style="text-align:center">多路复用</th><th style="text-align:center">header压缩</th><th style="text-align:center">服务器推送</th></tr></thead><tbody><tr><td style="text-align:center">http1</td><td style="text-align:center">文本</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">http2</td><td style="text-align:center">二进制</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td><td style="text-align:center">支持</td></tr></tbody></table><p><strong>辅助记忆</strong></p><p>推广二多头：推广表示服务器推送，二多头为”二锅头谐音”</p><p><strong>原文：</strong></p><p><a href="https://github.com/qianguyihao/Web/blob/master/13-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/01-%E9%9D%A2%E8%AF%95%E5%BF%85%E7%9C%8B/04-HTTP%E5%8D%8F%E8%AE%AE.md" target="_blank" rel="noopener">https://github.com/qianguyihao/Web/blob/master/13-%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/01-%E9%9D%A2%E8%AF%95%E5%BF%85%E7%9C%8B/04-HTTP%E5%8D%8F%E8%AE%AE.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node实现前端项目自动化部署</title>
      <link href="/2020/08/06/node%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/08/06/node%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="传统的手工部署"><a href="#传统的手工部署" class="headerlink" title="传统的手工部署"></a>传统的手工部署</h3><hr><ol><li>打包，本地运行npm run build打包生成dist文件夹。</li><li>ssh连接服务器，切换路径到web对应目录下。</li><li>上传代码到web目录，一般通过xshell或者xftp完成。</li></ol><p><a href="https://s1.ax1x.com/2020/08/06/agWs5d.png" data-fancybox="group" data-caption="image" class="fancybox"><img src="https://s1.ax1x.com/2020/08/06/agWs5d.png" alt="image" title="image"></a></p><p>传统的手工部署存在以下缺点：</p><ol><li>每次都需要打开xshell软件与服务器建立连接。</li><li>当负责多个项目且每个项目都具有测试环境和线上环境时，容易引起部署错误。</li></ol><h3 id="实现自动化部署流程"><a href="#实现自动化部署流程" class="headerlink" title="实现自动化部署流程"></a>实现自动化部署流程</h3><hr><h5 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h5><ol><li>读取配置文件，包含服务器host、port、web目录及本地目录等信息</li><li>本地打包，npm run build生成dist包</li><li>打包成zip，使用archiver将dist包打包成dist.zip</li><li>连接服务器，node-ssh读取配置连接服务器</li><li>上传zip，使用ssh.putFile上传dist.zip</li><li>解压缩zip，使用ssh.execCommand解压dist.zip</li><li>删除本地dist.zip，使用fs.unlink删除本地dist.zip</li></ol><p><a href="https://s1.ax1x.com/2020/08/06/agW6PA.png" data-fancybox="group" data-caption="image" class="fancybox"><img src="https://s1.ax1x.com/2020/08/06/agW6PA.png" alt="image" title="image"></a></p><h5 id="node中运行指令"><a href="#node中运行指令" class="headerlink" title="node中运行指令"></a>node中运行指令</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child_process包可用于执行shell指令</span></span><br><span class="line"><span class="keyword">const</span> childProcess = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line">childProcess.execSync(<span class="string">'npm run build'</span>);</span><br></pre></td></tr></table></figure></div><h5 id="文件打包成zip（archiver）"><a href="#文件打包成zip（archiver）" class="headerlink" title="文件打包成zip（archiver）"></a>文件打包成zip（archiver）</h5><p>archiver用于打包文件生成zip、rar等</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> archiver = <span class="built_in">require</span>(<span class="string">'archiver'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 设置压缩类型及级别</span></span><br><span class="line"> <span class="keyword">const</span> archive = archiver(<span class="string">'zip'</span>, &#123;</span><br><span class="line">   zlib: &#123; level: <span class="number">9</span> &#125;,</span><br><span class="line"> &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">throw</span> err;</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建文件输出流</span></span><br><span class="line"> <span class="keyword">const</span> output = fs.createWriteStream(__dirname + <span class="string">'/dist.zip'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 通过管道方法将输出流存档到文件</span></span><br><span class="line"> archive.pipe(output);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 从subdir子目录追加内容并重命名</span></span><br><span class="line"> archive.directory(<span class="string">'subdir/'</span>, <span class="string">'new-subdir'</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 完成打包归档</span></span><br><span class="line"> archive.finalize();</span><br></pre></td></tr></table></figure></div><h5 id="连接远程服务（node-ssh）"><a href="#连接远程服务（node-ssh）" class="headerlink" title="连接远程服务（node-ssh）"></a>连接远程服务（node-ssh）</h5><p>node-ssh是一个基于ssh2的轻量级npm包，主要用于ssh连接服务器、上传文件、执行命令。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> node_ssh = <span class="built_in">require</span>(<span class="string">'node-ssh'</span>)</span><br><span class="line"><span class="keyword">const</span> ssh = <span class="keyword">new</span> node_ssh()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line">ssh.connect(&#123;</span><br><span class="line">  host: <span class="string">'localhost'</span>,</span><br><span class="line">  username: <span class="string">'steel'</span>,</span><br><span class="line">  privateKey: <span class="string">'/home/steel/.ssh/id_rsa'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件</span></span><br><span class="line">  ssh.putFile(<span class="string">'/home/steel/Lab/localPath'</span>, <span class="string">'/home/steel/Lab/remotePath'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The File thing is done"</span>)</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Something's wrong"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在远程服务执行命令</span></span><br><span class="line">  ssh.execCommand(<span class="string">'hh_client --json'</span>, &#123; <span class="attr">cwd</span>:<span class="string">'/var/www'</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'STDOUT: '</span> + result.stdout)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'STDERR: '</span> + result.stderr)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div><h5 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// deploy.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> childProcess = <span class="built_in">require</span>(<span class="string">'child_process'</span>);</span><br><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> node_ssh = <span class="built_in">require</span>(<span class="string">'node-ssh'</span>);</span><br><span class="line"><span class="keyword">const</span> archiver = <span class="built_in">require</span>(<span class="string">'archiver'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; successLog, errorLog, underlineLog &#125; = <span class="built_in">require</span>(<span class="string">'../utils/index'</span>);</span><br><span class="line"><span class="keyword">const</span> projectDir = process.cwd();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ssh = <span class="keyword">new</span> node_ssh(); <span class="comment">// 生成ssh实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署流程入口</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">deploy</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; script, webDir, distPath, projectName, name &#125; = config;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    execBuild(script);</span><br><span class="line">    <span class="keyword">await</span> startZip(distPath);</span><br><span class="line">    <span class="keyword">await</span> connectSSH(config);</span><br><span class="line">    <span class="keyword">await</span> uploadFile(webDir);</span><br><span class="line">    <span class="keyword">await</span> unzipFile(webDir);</span><br><span class="line">    <span class="keyword">await</span> deleteLocalZip();</span><br><span class="line">    successLog(<span class="string">`\n 恭喜您，<span class="subst">$&#123;underlineLog(projectName)&#125;</span>项目<span class="subst">$&#123;underlineLog(name)&#125;</span>部署成功了^_^\n`</span>);</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    errorLog(<span class="string">`  部署失败 <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一步，执行打包脚本</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execBuild</span>(<span class="params">script</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`\n（1）<span class="subst">$&#123;script&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">const</span> spinner = ora(<span class="string">'正在打包中'</span>);</span><br><span class="line">    spinner.start();</span><br><span class="line">    <span class="built_in">console</span>.log();</span><br><span class="line">    childProcess.execSync(script, &#123; <span class="attr">cwd</span>: projectDir &#125;);</span><br><span class="line">    spinner.stop();</span><br><span class="line">    successLog(<span class="string">'  打包成功'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    errorLog(err);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二部，打包zip</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startZip</span>(<span class="params">distPath</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    distPath = path.resolve(projectDir, distPath);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'（2）打包成zip'</span>);</span><br><span class="line">    <span class="keyword">const</span> archive = archiver(<span class="string">'zip'</span>, &#123;</span><br><span class="line">      zlib: &#123; <span class="attr">level</span>: <span class="number">9</span> &#125;,</span><br><span class="line">    &#125;).on(<span class="string">'error'</span>, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> output = fs.createWriteStream(<span class="string">`<span class="subst">$&#123;projectDir&#125;</span>/dist.zip`</span>);</span><br><span class="line">    output.on(<span class="string">'close'</span>, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        errorLog(<span class="string">`  关闭archiver异常 <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">        reject(err);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      successLog(<span class="string">'  zip打包成功'</span>);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">    archive.pipe(output);</span><br><span class="line">    archive.directory(distPath, <span class="string">'/'</span>);</span><br><span class="line">    archive.finalize();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三步，连接SSH</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">connectSSH</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; host, port, username, password, privateKey, passphrase, distPath &#125; = config;</span><br><span class="line">  <span class="keyword">const</span> sshConfig = &#123;</span><br><span class="line">    host,</span><br><span class="line">    port,</span><br><span class="line">    username,</span><br><span class="line">    password,</span><br><span class="line">    privateKey,</span><br><span class="line">    passphrase</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`（3）连接<span class="subst">$&#123;underlineLog(host)&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">await</span> ssh.connect(sshConfig);</span><br><span class="line">    successLog(<span class="string">'  SSH连接成功'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    errorLog(<span class="string">`  连接失败 <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第四部，上传zip包</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">webDir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`（4）上传zip至目录<span class="subst">$&#123;underlineLog(webDir)&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">await</span> ssh.putFile(<span class="string">`<span class="subst">$&#123;projectDir&#125;</span>/dist.zip`</span>, <span class="string">`<span class="subst">$&#123;webDir&#125;</span>/dist.zip`</span>);</span><br><span class="line">    successLog(<span class="string">'  zip包上传成功'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    errorLog(<span class="string">`  zip包上传失败 <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行命令</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">runCommand</span>(<span class="params">command, webDir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> ssh.execCommand(command, &#123; <span class="attr">cwd</span>: webDir &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第五步，解压zip包</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">unzipFile</span>(<span class="params">webDir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'（5）开始解压zip包'</span>);</span><br><span class="line">    <span class="keyword">await</span> runCommand(<span class="string">`cd <span class="subst">$&#123;webDir&#125;</span>`</span>, webDir);</span><br><span class="line">    <span class="keyword">await</span> runCommand(<span class="string">'unzip -o dist.zip &amp;&amp; rm -f dist.zip'</span>, webDir);</span><br><span class="line">    successLog(<span class="string">'  zip包解压成功'</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    errorLog(<span class="string">`  zip包解压失败 <span class="subst">$&#123;err&#125;</span>`</span>);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第六步，删除本地dist.zip包</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">deleteLocalZip</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'（6）开始删除本地zip包'</span>);</span><br><span class="line">    fs.unlink(<span class="string">`<span class="subst">$&#123;projectDir&#125;</span>/dist.zip`</span>, err =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        errorLog(<span class="string">`  本地zip包删除失败 <span class="subst">$&#123;err&#125;</span>`</span>, err);</span><br><span class="line">        reject(err);</span><br><span class="line">        process.exit(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      successLog(<span class="string">'  本地dist.zip删除成功\n'</span>);</span><br><span class="line">      resolve();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = deploy;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黄金蝴蝶虾</title>
      <link href="/2020/05/30/%E7%BE%8E%E9%A3%9F-%E9%BB%84%E9%87%91%E8%9D%B4%E8%9D%B6%E8%99%BE/"/>
      <url>/2020/05/30/%E7%BE%8E%E9%A3%9F-%E9%BB%84%E9%87%91%E8%9D%B4%E8%9D%B6%E8%99%BE/</url>
      
        <content type="html"><![CDATA[<h3 id="准备食材"><a href="#准备食材" class="headerlink" title="准备食材"></a>准备食材</h3><ul><li>虾</li><li>面包糠</li><li>淀粉</li><li>鸡蛋</li><li>料酒、盐、胡椒粉、姜片</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li><p>把虾洗净，去头去壳</p></li><li><p>把虾开背不要切断，以便入味<br><a href="https://imgchr.com/i/NdZlzd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/24/NdZlzd.md.jpg" alt="NdZlzd.md.jpg"></a></p></li><li>加料酒、胡椒粉、姜片、盐腌制15分钟<br><a href="https://imgchr.com/i/NdCHXT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/24/NdCHXT.md.jpg" alt="NdCHXT.md.jpg"></a></li><li>备好三个小碗分别加入面包糠、淀粉、鸡蛋<br><a href="https://imgchr.com/i/NdCY6K" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/24/NdCY6K.png" alt="NdCY6K.png"></a></li><li>先沾淀粉，在沾鸡蛋，在沾面包糠<br><a href="https://imgchr.com/i/NdFPTe" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/24/NdFPTe.md.jpg" alt="NdFPTe.md.jpg"></a></li><li>热锅下油，待冒烟后，将虾下油锅炸成金黄色即可，炸的过程为防止炸糊可以用筷子翻面<br><a href="https://imgchr.com/i/NdEmOx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/24/NdEmOx.md.jpg" alt="NdEmOx.md.jpg"></a></li></ol><h3 id="自评"><a href="#自评" class="headerlink" title="自评"></a>自评</h3><p>用的食材是冻虾，吃出了鲜虾的口感，味道90分。<br><a href="https://imgchr.com/i/NdCLBF" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/06/24/NdCLBF.md.jpg" alt="NdCLBF.md.jpg"></a></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下厨房 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读书笔记-刻意练习</title>
      <link href="/2020/03/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/"/>
      <url>/2020/03/30/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E5%88%BB%E6%84%8F%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://s1.ax1x.com/2020/03/30/GmfDij.png" data-fancybox="group" data-caption="刻意练习" class="fancybox"><img src="https://s1.ax1x.com/2020/03/30/GmfDij.png" alt="刻意练习" title="刻意练习"></a></p><p>这本书是著名心理学家 Anders Ericsson 的著作。之所以强调这本书的重要性，是因为在学习的过程中，在跟其他同学沟通的过程中，发现大家学习最常遇到的一个问题：缺乏有效的练习。</p><p><strong>无论学什么，都不能规避《刻意练习》。</strong></p><p><strong>找对了学习方法后，更要坚持《刻意练习》。</strong></p><p>大家都有很多提高效率的学习方法，但是，如果没有你的主观努力，用什么方法都白搭，刻意练习也是一样。</p><p>思维导图介绍：</p><p><a href="https://s1.ax1x.com/2020/03/30/GmWUUJ.png" data-fancybox="group" data-caption="刻意练习思维导图" class="fancybox"><img src="https://s1.ax1x.com/2020/03/30/GmWUUJ.png" alt="刻意练习思维导图" title="刻意练习思维导图"></a></p><h2 id="刻意练习的步骤"><a href="#刻意练习的步骤" class="headerlink" title="刻意练习的步骤"></a>刻意练习的步骤</h2><p><strong>如何才能进行有效的刻意练习呢？</strong></p><blockquote><ol><li>具有定义明确的特定目标</li><li>练习，要专注</li><li>走出舒适区</li><li>刻意练习需要有效反馈</li></ol></blockquote><h3 id="具有定义明确的特定目标"><a href="#具有定义明确的特定目标" class="headerlink" title="具有定义明确的特定目标"></a>具有定义明确的特定目标</h3><p>练习，要有目的。</p><p>如果不给自己制定更明确的目标，很容易在中间就放弃。</p><p>不管是应试还是爱好，目标都要具体化。比如，考过四六级、考研及格，这只是一个总体的目标，仍然不够清晰。</p><p>目标设定：<strong>细分自己的目标，并且可以量化。</strong></p><blockquote><ul><li>比如，为了考研英语考出好成绩，</li><li>完形至少应该拿 8 分；</li><li>阅读至少应该拿 44 分；</li><li>翻译 6 分，作文 22 分。</li><li>然后继续细分，阅读分值最高，我应该怎样攻下阅读。</li></ul></blockquote><h3 id="练习，要专注"><a href="#练习，要专注" class="headerlink" title="练习，要专注"></a>练习，要专注</h3><p>书中列举了记忆学习者法隆的例子，尽管训练的时间不长，但每次训练期间，他的注意力都能高度集中。一开始他只能记住 7 个数字，到实验一半时，他已经能记住 40 个数字了。</p><p><strong>一切在学习期间跟你争夺注意力的东西，都是你的敌人。</strong></p><p>比如你现在看的知乎，手中的手机。</p><p>所以，学习的时候要开启专注模式，当你进入学习的状态后，你会发现原来你可以连续学习十几个小时都不累。来自亲身体验。</p><h3 id="走出舒适区"><a href="#走出舒适区" class="headerlink" title="走出舒适区"></a>走出舒适区</h3><p>舒适区，<strong>comfort zone</strong>，这个概念大家已经见过不止一次两次了。</p><p>不过就像拖延症一样，大家都知道应该这样做，可真到了自己要迈出这一步的时候，又把脚收回去了。</p><p>对于很多同学来说，听力实在是太不舒适的地方了。但是，如果让你听 Good morning，How are you doing? 你肯定没什么问题。</p><p>所以，我不建议大家一开始就大踏步迈到难受的 <strong>panic zone</strong>（恐慌区）里，而是试探性地进入学习区，感受一下。</p><p><a href="https://s1.ax1x.com/2020/03/30/GmWNE4.png" data-fancybox="group" data-caption="GmWNE4.png" class="fancybox"><img src="https://s1.ax1x.com/2020/03/30/GmWNE4.png" alt="GmWNE4.png" title="GmWNE4.png"></a></p><p>大家选择的学习材料要跟自己的水平大致相当，或者稍高出一个档次，这就是 Krashen 提出的 i+1 理论中一个重要观点。</p><p>拿前端编程人员学习后端开发来说：</p><blockquote><ul><li>前端开发工程师，已掌握js语法</li><li>先接触node后端开发（node基于js语法）</li><li>有后端开发经验、思想，再去学习java开发</li><li>循序渐进而不是揠苗助长地去学习</li></ul></blockquote><p><strong>如果墨守成规的一直待在舒适区，就永远无法进步。</strong></p><h3 id="刻意练习需要有效反馈"><a href="#刻意练习需要有效反馈" class="headerlink" title="刻意练习需要有效反馈"></a>刻意练习需要有效反馈</h3><p>书中举了音乐学生的栗子。学生练习很认真，但是似乎没有人给他提供过反馈，没人指出他的错误，所以，他过去做的其实只是重复自己的错误，尽管他专注、努力、有目标，最后还是只拿到了 C 的成绩。</p><p><strong>反馈的来源主要分两类：一类是物，一类是人。</strong></p><p>对于应试的孩子来说，题目的答案可以让你获得即时反馈，自己错了几个，能得多少分。</p><p>对于学习其他技能、方法，比如学习摄影，自己拍的照片好不好，不好在哪儿；自己练习听力只能记住两三个单词，多了就记不住了，原因在哪儿？</p><p>除了自己去探索外，外界，尤其是在这个领域经、资历更丰富的人，往往更容易帮你找到问题的症结。</p><p>《刻意练习》在后面的章节再次强调了老师的重要性，甚至称之为这是成功最重要的事情。</p><blockquote><p>为了你的成功，最重要的一件事情是找一位好导师，并向他请教。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 书籍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手摸手带你用javascript实现e2e自动化测试</title>
      <link href="/2020/03/10/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%E7%94%A8javascript%E5%AE%9E%E7%8E%B0e2e%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2020/03/10/%E6%89%8B%E6%91%B8%E6%89%8B%E5%B8%A6%E4%BD%A0%E7%94%A8javascript%E5%AE%9E%E7%8E%B0e2e%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="相关技术栈和工具"><a href="#相关技术栈和工具" class="headerlink" title="相关技术栈和工具"></a>相关技术栈和工具</h3><hr><ul><li><a href="https://cucumber.io/docs/bdd/" target="_blank" rel="noopener">行为驱动开发（BDD）</a>：软件团队工作的一种方式</li><li><a href="https://webdriver.io/" target="_blank" rel="noopener">webdriverio</a>：适用于node的端到端测试框架</li><li><a href="https://cucumber.io/" target="_blank" rel="noopener">cucumber.js</a>：实现BDD开发的框架</li><li><a href="http://www.selenium.org.cn/" target="_blank" rel="noopener">selenium</a>：免费的分布式的自动化测试工具</li><li><a href="https://www.chaijs.com/" target="_blank" rel="noopener">chai</a>：测试中用到的断言工具</li><li><a href="http://cuketest.com/" target="_blank" rel="noopener">cukeTest</a>：快速编辑自动化脚本的编辑器</li><li><a href="https://www.mongodb.org.cn/" target="_blank" rel="noopener">mongodb</a>：数据库，断言会用到</li></ul><p><strong>实现效果：</strong> 自动打开谷歌浏览器，并模拟用户进行操作，测试后生成一份测试报告。</p><p><strong>备注：</strong> ==主要用到wdio（webdriverio简写）框架，wdio内置了cucumber.js、selenium，嫌麻烦重点看wdio和chai说明文档即可。==</p><h4 id="BDD介绍"><a href="#BDD介绍" class="headerlink" title="BDD介绍"></a>BDD介绍</h4><h5 id="什么是BDD？"><a href="#什么是BDD？" class="headerlink" title="什么是BDD？"></a>什么是BDD？</h5><p>BDD是软件团队工作的一种方式，它可以通过以下方式缩小业务人员和技术人员之间的差距：</p><blockquote><ol><li>鼓励跨角色协作以建立对要解决问题的共识</li><li>进行快速，小的迭代，以增加反馈和价值</li><li>生成系统文档，并根据系统行为自动检查</li></ol></blockquote><p>为此，我们将重点放在具体的实际示例上来开展协作工作，这些示例说明了我们希望系统如何运行。在持续的协作过程中，我们使用这些示例来指导我们从概念到实现。</p><h5 id="BDD具体实现"><a href="#BDD具体实现" class="headerlink" title="BDD具体实现"></a>BDD具体实现</h5><p>本质上，日常的BDD活动是一个三步骤的迭代过程：</p><blockquote><ol><li>首先，对系统进行一个小更改命名为“用户故事”，并讨论其新功能的具体测试用例，就预期要做的细节达成一致。</li><li>接下来，以一种可以自动化的方式记录这些测试用例。</li><li>最后，实现每个记录的测试用例所描述的行为，并以实现自动化测试的目标来指导功能代码的开发。</li></ol></blockquote><p>这样做的想法是改动较少的代码并快速迭代，将功能给到测试或产品。每次您自动化并实现一个新示例时，便为应用添加了一些有价值的东西，并得到及时的响应反馈，提高团队开发效率。</p><h3 id="搭建e2e测试框架"><a href="#搭建e2e测试框架" class="headerlink" title="搭建e2e测试框架"></a>搭建e2e测试框架</h3><hr><h4 id="初始化目录结构"><a href="#初始化目录结构" class="headerlink" title="初始化目录结构"></a>初始化目录结构</h4><p><a href="https://s2.ax1x.com/2020/03/10/8iaua4.png" data-fancybox="group" data-caption="自动化测试目录结构" class="fancybox"><img src="https://s2.ax1x.com/2020/03/10/8iaua4.png" alt="自动化测试目录结构" title="自动化测试目录结构"></a></p><h4 id="初始化配置和环境"><a href="#初始化配置和环境" class="headerlink" title="初始化配置和环境"></a>初始化配置和环境</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装wdio依赖，安装后会生成./node_modules/.bin/wdio文件</span></span><br><span class="line">npm i --save-dev @wdio/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成wdio配置文件。</span></span><br><span class="line"><span class="comment"># 注意：生成配置文件过程会让你选择报告插件、BDD框架、是否开启同步模式、浏览器驱动。</span></span><br><span class="line"><span class="comment"># 我的配置是选择allure-reporter报告、cucumber框架、开启同步模式、chromedriver驱动，选择后会自动安装所需依赖</span></span><br><span class="line">./node_modules/.bin/wdio config -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装断言依赖</span></span><br><span class="line">npm i chai --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加启动指令到package.json</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"scripts"</span>: &#123;</span><br><span class="line">        <span class="string">"test:e2e"</span>: <span class="string">"wdio ./test/e2e/wdio.conf.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1.电脑需安装Java 8</span><br><span class="line">2.依赖包chromedriver版本要和chrome浏览器版本一致，否则自动打开浏览器会闪退</span><br><span class="line">3.node需要版本10以上，否则报错</span><br></pre></td></tr></table></figure></div><h5 id="修改wdio配置"><a href="#修改wdio配置" class="headerlink" title="修改wdio配置"></a>修改wdio配置</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将wdio.conf.js移到test/e2e/下</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改wdio.conf.js中配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">exports</span>.config = &#123;</span><br><span class="line">    ...</span><br><span class="line">    path: <span class="string">'/wd/hub'</span>,<span class="comment">// 由于使用chromedriver，此处配置成谷歌服务路径</span></span><br><span class="line">    specs: [</span><br><span class="line">        <span class="string">'./test/e2e/features/*.feature'</span><span class="comment">// 要检索测试用例的路径</span></span><br><span class="line">    ],</span><br><span class="line">    bail: <span class="number">100</span>,<span class="comment">// 运行测试失败对应次数后，停止测试</span></span><br><span class="line">    capabilities: [&#123;</span><br><span class="line">        maxInstances: <span class="number">5</span>,</span><br><span class="line">        browserName: <span class="string">'chrome'</span>,</span><br><span class="line">        <span class="comment">// 配置 无浏览器测试（如不需要将goog:chromeOptions注释）</span></span><br><span class="line">        <span class="string">'goog:chromeOptions'</span>: &#123;</span><br><span class="line">          args: [<span class="string">'--headless'</span>, <span class="string">'--disable-gpu'</span>],</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;],</span><br><span class="line">    logLevel: <span class="string">'silent'</span>,<span class="comment">// 日志等级silent简单，info详细</span></span><br><span class="line">    baseUrl: <span class="string">'http://localhost:9528/'</span>,<span class="comment">// 基础路径</span></span><br><span class="line">    services: [<span class="string">'chromedriver'</span>],<span class="comment">// 浏览器驱动</span></span><br><span class="line">    framework: <span class="string">'cucumber'</span>,<span class="comment">// BDD框架</span></span><br><span class="line">    <span class="comment">// 报告生成路径</span></span><br><span class="line">    reporters: [[<span class="string">'allure'</span>, &#123;</span><br><span class="line">        outputDir: <span class="string">'./test/e2e/reports/allure-results/'</span>,</span><br><span class="line">        disableWebdriverStepsReporting: <span class="keyword">true</span>,</span><br><span class="line">        disableWebdriverScreenshotsReporting: <span class="keyword">false</span>,</span><br><span class="line">    &#125;]],</span><br><span class="line">    <span class="comment">// cucumber配置</span></span><br><span class="line">    cucumberOpts: &#123;</span><br><span class="line">        ...</span><br><span class="line">            require: [<span class="string">'./test/e2e/stepDefinitions/**/*.js'</span>],<span class="comment">// 实现步骤代码的路径</span></span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;，</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="测试用例编写和实现"><a href="#测试用例编写和实现" class="headerlink" title="测试用例编写和实现"></a>测试用例编写和实现</h4><h5 id="测试用例编写"><a href="#测试用例编写" class="headerlink" title="测试用例编写"></a>测试用例编写</h5><p>由于上文wdio配置中已配置specs: [‘./test/e2e/features/*.feature’]，<br>所以wdio会检索该目录下的所有feature文件<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">gherkin</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 新建test.feature于目录test/e2e/features/</span><br><span class="line">// 并增加如下内容</span><br><span class="line"></span><br><span class="line"><span class="comment"># 剧本标题</span></span><br><span class="line"><span class="keyword">Feature</span>: 百度使用测试</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 场景名称</span></span><br><span class="line">  <span class="keyword">Scenario</span> <span class="keyword">Outline</span>: 百度标题是否正确</span><br><span class="line">    <span class="comment"># 具体步骤，共有Given、When、Then三个关键词来标识所有步骤</span></span><br><span class="line">    <span class="keyword">When</span> 进入百度网站</span><br><span class="line">    <span class="keyword">Then</span> 网站标题为<span class="string">"&lt;title&gt;"</span></span><br><span class="line">    <span class="comment"># 例子：程序会按照例子中每一行数据来执行场景步骤</span></span><br><span class="line">    <span class="keyword">Examples</span>:</span><br><span class="line">      |<span class="string"> title     </span>|</span><br><span class="line">      |<span class="string"> 百度一下，你就知道 </span>|</span><br></pre></td></tr></table></figure></div></p><h5 id="测试用例自动化的实现"><a href="#测试用例自动化的实现" class="headerlink" title="测试用例自动化的实现"></a>测试用例自动化的实现</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">php</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建hook.js 与目录test/e2e/</span></span><br><span class="line"><span class="comment">// 自动化测试钩子</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  before: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 将一些常用api设置成全局变量</span></span><br><span class="line">    <span class="keyword">const</span> chai = <span class="keyword">require</span>(<span class="string">'chai'</span>);</span><br><span class="line">    <span class="keyword">global</span>.expect = chai.expect;</span><br><span class="line">    <span class="keyword">global</span>.assert = chai.assert;</span><br><span class="line">    <span class="keyword">global</span>.should = chai.should();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; Given, When, Then &#125; = <span class="keyword">require</span>(<span class="string">'cucumber'</span>)</span><br><span class="line">    <span class="keyword">global</span>.Given = Given;</span><br><span class="line">    <span class="keyword">global</span>.When = When;</span><br><span class="line">    <span class="keyword">global</span>.Then = Then;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> Page = <span class="keyword">require</span>(<span class="string">'./pageObjects/page.js'</span>)</span><br><span class="line">    <span class="keyword">global</span>.global_page = <span class="keyword">new</span> Page();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 每个场景结束后，增加截图展示</span></span><br><span class="line">  afterScenario: <span class="function"><span class="keyword">function</span><span class="params">(scenarioResult)</span> </span>&#123;</span><br><span class="line">    browser.takeScreenshot();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">lasso</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// wdio.conf.js</span></span><br><span class="line"><span class="comment">// 将hook导入wdio配置中</span></span><br><span class="line"></span><br><span class="line">const hook = <span class="keyword">require</span>(<span class="string">'./hook'</span>);</span><br><span class="line"></span><br><span class="line">exports.config = &#123;</span><br><span class="line">  <span class="params">...</span></span><br><span class="line">  <span class="comment">// 导入自定义配置</span></span><br><span class="line">  <span class="params">...</span>hook,</span><br><span class="line">  <span class="params">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">actionscript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建given.js、when.js、then.js于目录test/e2e/stepDefinitions/</span></span><br><span class="line"><span class="comment">// feature文件中Given、When、Then步骤的逻辑要在这三个文件中实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// when.js</span></span><br><span class="line"></span><br><span class="line">When(<span class="string">"进入百度网站"</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">  browser.url(<span class="string">'https://www.baidu.com/'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// then.js</span></span><br><span class="line"></span><br><span class="line">Then(<span class="string">"网站标题为&#123;string&#125;"</span>, <span class="function"><span class="keyword">function</span> <span class="params">(title)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> browserTitle = browser.getTitle();</span><br><span class="line">  expect(browserTitle).to.be.equal(title);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p><strong>其中</strong></p><ul><li><strong>browser</strong>为wdio的全局对象，用来操作浏览器，具体看<a href="https://webdriver.io/docs/api.html" target="_blank" rel="noopener">官网api</a></li><li><strong>expect</strong>为chai断言中的一种，用于预期结果的判断（如上例子判断当前浏览器的标题和例子中’百度一下，你就知道’是相等的）</li></ul><h5 id="执行自动化测试"><a href="#执行自动化测试" class="headerlink" title="执行自动化测试"></a>执行自动化测试</h5><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">dockerfile</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 由于上文已将启动指令添加到package.json中，直接运行即可</span><br><span class="line"></span><br><span class="line">npm <span class="keyword">run</span><span class="bash"> <span class="built_in">test</span>:e2e</span></span><br></pre></td></tr></table></figure></div><p>运行后，浏览器会自动执行步骤，控制台会打印执行日志信息</p><h4 id="输出测试结果报告，并在浏览器展示"><a href="#输出测试结果报告，并在浏览器展示" class="headerlink" title="输出测试结果报告，并在浏览器展示"></a>输出测试结果报告，并在浏览器展示</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">vala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 安装测试报告生成工具</span></span><br><span class="line">npm install -g allure-commandline --save-dev</span><br><span class="line"></span><br><span class="line"><span class="meta"># package.json 中增加scripts指令，用于生成报告</span></span><br><span class="line"><span class="string">"allure-report"</span>: <span class="string">"cd test/e2e/reports &amp;&amp; allure generate --clean ./allure-results &amp;&amp; allure open"</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 生成allure报告，并在浏览器打开（此时不可打开vpn，否则读取不到服务数据）</span></span><br><span class="line"><span class="meta"># 先手动删除test/e2e/reports/allure-results 文件夹，否则有旧的测试缓存</span></span><br><span class="line">npm run allure-report</span><br></pre></td></tr></table></figure></div><p><a href="https://s2.ax1x.com/2020/03/10/8iaKIJ.md.png" data-fancybox="group" data-caption="测试报告" class="fancybox"><img src="https://s2.ax1x.com/2020/03/10/8iaKIJ.md.png" alt="测试报告" title="测试报告"></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript实现浏览器批量打包下载</title>
      <link href="/2020/02/28/JavaScript%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%B9%E9%87%8F%E6%89%93%E5%8C%85%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/02/28/JavaScript%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%B9%E9%87%8F%E6%89%93%E5%8C%85%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h2><ul><li><a href="https://stuk.github.io/jszip/" target="_blank" rel="noopener">JSZip</a>：用于创建、读取和编辑.zip文件的javascript库</li><li><a href="https://github.com/eligrey/FileSaver.js/" target="_blank" rel="noopener">FileSaver</a>：将文件保存到本地的解决方案</li><li><a href="http://www.axios-js.com/" target="_blank" rel="noopener">axios</a>：Vue推荐的http库</li></ul><h2 id="JSZip浏览器支持"><a href="#JSZip浏览器支持" class="headerlink" title="JSZip浏览器支持"></a>JSZip浏览器支持</h2><table><thead><tr><th>Opera</th><th>Firefox</th><th>Safari</th><th>Chrome</th><th>Internet Explorer</th><th>Node.js</th></tr></thead><tbody><tr><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>Tested with the latest version</td><td>Tested with 3.0 / 3.6 / latest version</td><td>Tested with the latest version</td><td>Tested with the latest version</td><td>Tested with IE 6 / 7 / 8 / 9 / 10</td><td>Tested with node.js 0.10 / latest version</td></tr></tbody></table><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">javascript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JSZip <span class="keyword">from</span> <span class="string">'jszip'</span>;</span><br><span class="line"><span class="keyword">import</span> FileSaver <span class="keyword">from</span> <span class="string">'file-saver'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zip = <span class="keyword">new</span> JSZip();</span><br><span class="line">zip.file(<span class="string">"Hello.txt"</span>, <span class="string">"Hello World\n"</span>);</span><br><span class="line"><span class="comment">// zip.folder(name):如果目录不存在，创建一个目录，并以新文件夹为根返回一个新的JSZip对象。</span></span><br><span class="line"><span class="keyword">var</span> img = zip.folder(<span class="string">"images"</span>);</span><br><span class="line">img.file(<span class="string">"smile.gif"</span>, imgData, &#123;<span class="attr">base64</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">zip.generateAsync(&#123;<span class="attr">type</span>:<span class="string">"blob"</span>&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 将文件保存到本地</span></span><br><span class="line">    FileSaver.saveAs(content, <span class="string">"example.zip"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div><p><strong>zip.file(name, data, options)</strong>，将文件添加（或更新）到zip文件中。</p><table><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>name</td><td>string</td><td>文件名。您可以在名称中指定文件夹：文件夹分隔符为正斜杠（“ /”）。</td></tr><tr><td>data</td><td>String/ArrayBuffer/Uint8Array/Buffer/Blob/Promise/Nodejs stream</td><td>文件的内容。</td></tr><tr><td>options</td><td>object</td><td><a href="https://stuk.github.io/jszip/documentation/api_jszip/file_data.html" target="_blank" rel="noopener">配置选项</a></td></tr></tbody></table><p><strong>zip.generateAsync( object )</strong>，在当前文件夹级别生成完整的zip文件。</p><p>其中参数object支持的配置可看<a href="https://stuk.github.io/jszip/documentation/api_jszip/generate_async.html" target="_blank" rel="noopener">官方说明</a>，这边简单说说type配置项。</p><p><strong>可能的值type：</strong></p><ol><li>base64：结果将是一个字符串，二进制格式为base64。</li><li>binarystring（或string已弃用）：结果将是“二进制”形式的字符串，每个字符使用1个字节（2个字节）。</li><li>array：结果将是字节数组（0到255之间的数字）。</li><li>uint8array：结果将是包含Uint8Array的zip。这需要兼容的浏览器。</li><li>arraybuffer：结果将是一个包含ArrayBuffer的zip。这需要兼容的浏览器。</li><li>blob：结果将是包含Blob的zip。这需要兼容的浏览器。</li><li>nodebuffer：结果将是包含nodebuffer的zip。这需要nodejs。</li></ol><h2 id="结合axios实现批量打包下载"><a href="#结合axios实现批量打包下载" class="headerlink" title="结合axios实现批量打包下载"></a>结合axios实现批量打包下载</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">typescript</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> JSZip <span class="keyword">from</span> <span class="string">'jszip'</span>;</span><br><span class="line"><span class="keyword">import</span> FileSaver <span class="keyword">from</span> <span class="string">'file-saver'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加getFile方法异步获取远程资源</span></span><br><span class="line">getFile(url) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      axios(&#123;</span><br><span class="line">        method: <span class="string">'get'</span>,</span><br><span class="line">        url,</span><br><span class="line">        responseType: <span class="string">'blob'</span></span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">compressedFiles(allUrl) &#123;</span><br><span class="line">    <span class="keyword">const</span> zip = <span class="keyword">new</span> JSZip();</span><br><span class="line">    <span class="keyword">const</span> promises = [];</span><br><span class="line">    </span><br><span class="line">    allUrl.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> promise = <span class="keyword">this</span>.getFile(item).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 获取文件名</span></span><br><span class="line">        zip.file(<span class="string">`name&#123;index&#125;`</span>, data.data); <span class="comment">// 逐个添加文件</span></span><br><span class="line">      &#125;);</span><br><span class="line">      promises.push(promise);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      zip.generateAsync(&#123; <span class="keyword">type</span>: <span class="string">'blob'</span> &#125;).then(<span class="function"><span class="params">content</span> =&gt;</span> &#123;</span><br><span class="line">        FileSaver.saveAs(content, <span class="string">'压缩文件.zip'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line"><span class="keyword">this</span>.compressedFiles([<span class="string">'http://path1'</span>,<span class="string">'http://path2'</span>]);</span><br></pre></td></tr></table></figure></div><p><strong>这就对远程资源实现批量打包下载啦！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卤鸡腿</title>
      <link href="/2019/11/24/%E7%BE%8E%E9%A3%9F-%E5%8D%A4%E9%B8%A1%E8%85%BF/"/>
      <url>/2019/11/24/%E7%BE%8E%E9%A3%9F-%E5%8D%A4%E9%B8%A1%E8%85%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="准备食材"><a href="#准备食材" class="headerlink" title="准备食材"></a>准备食材</h3><ul><li>解冻鸡腿</li><li>辣椒</li><li>葱头</li><li>大蒜</li><li>姜</li><li>生抽、老抽、料酒、盐巴、味精</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>给解冻鸡腿焯水，完后放入冷水浸泡</li><li>用牙签给鸡腿扎孔，觉得麻烦用刀切几个口子也行</li><li>起锅热油，油热后开小火，再放入辣椒、葱头、大蒜、生抽、老抽、料酒炒香</li><li>加入鸡腿翻炒60s</li><li>加入快淹没鸡腿的清水焖几分钟，放入盐巴、味精翻炒在焖几分钟，直至汤汁被吸收即可出锅。</li></ol><p><strong>让人欲罢不能的卤鸡腿就制作完成啦！</strong></p><p><a href="https://s2.ax1x.com/2020/02/29/3yycoF.md.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img src="https://s2.ax1x.com/2020/02/29/3yycoF.md.jpg" alt="image" title="image"></a></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下厨房 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剁椒鱼头（超级简单）</title>
      <link href="/2019/11/23/%E7%BE%8E%E9%A3%9F-%E5%89%81%E6%A4%92%E9%B1%BC%E5%A4%B4/"/>
      <url>/2019/11/23/%E7%BE%8E%E9%A3%9F-%E5%89%81%E6%A4%92%E9%B1%BC%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="准备食材"><a href="#准备食材" class="headerlink" title="准备食材"></a>准备食材</h3><ul><li>鲢鱼头一个（大超市有卖，一斤15元）</li><li>剁椒（超市罐装剁椒即可）</li><li>葱花</li><li>姜</li><li>酱油</li><li>小捆粉（煮火锅那种小捆的米粉）</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>切葱花姜片，鱼头对半切开</li><li>摆盘，将小捆粉摆在盘底，鱼头正面抄上摆好，将剁椒葱姜撒到鱼头表面</li><li>蒸煮十分钟即可出锅，出锅后撒上些许酱油</li></ol><p><strong>香喷喷的剁椒鱼头就制作完成啦！</strong></p><p><a href="https://s2.ax1x.com/2020/02/29/3yyDs0.md.jpg" data-fancybox="group" data-caption="image" class="fancybox"><img src="https://s2.ax1x.com/2020/02/29/3yyDs0.md.jpg" alt="image" title="image"></a></p>]]></content>
      
      
      <categories>
          
          <category> 美食 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 下厨房 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5拖放</title>
      <link href="/2019/04/14/drag-drop/"/>
      <url>/2019/04/14/drag-drop/</url>
      
        <content type="html"><![CDATA[<hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=139774&auto=0&height=66"></iframe><hr><h1 id="H5-拖放"><a href="#H5-拖放" class="headerlink" title="H5 拖放"></a>H5 拖放</h1><h3 id="1-浏览器支持："><a href="#1-浏览器支持：" class="headerlink" title="1.浏览器支持："></a>1.浏览器支持：</h3><p>IE 9以上、Firefox、Opera、Chrome以及Safari 12支持拖放</p><h3 id="2-拖放组成部分："><a href="#2-拖放组成部分：" class="headerlink" title="2.拖放组成部分："></a>2.拖放组成部分：</h3><p>分为两部分： 拖拽<strong>drag</strong> 和 释放 <strong>drop</strong></p><p>可以理解为：</p><p>源对象=&gt;拖动的元素；</p><p>目标对象=&gt;接收被拖动目标的元素</p><p><a href="https://img-blog.csdn.net/20180610141232779" data-fancybox="group" data-caption class="fancybox"><img src="https://img-blog.csdn.net/20180610141232779" alt title></a></p><h3 id="3-API"><a href="#3-API" class="headerlink" title="3.API"></a>3.API</h3><ul><li><p>设置元素为可拖放</p><p>  <code>&lt;img draggable=&quot;true&quot;/&gt;</code></p></li><li><p>被拖动的源对象可以触发的事件</p><ol><li><p>ondragstart：源对象开始被拖动</p></li><li><p>ondrag：源对象被拖动过程中(鼠标可能在移动也可能未移动)</p></li><li><p>ondragend：源对象被拖动结束</p></li></ol></li><li><p>目标对象可以触发的事件</p><ol><li><p>ondragenter：目标对象被源对象拖动着进入</p></li><li><p>ondragover：目标对象被源对象拖动着悬停在上方</p></li><li><p>ondragleave：源对象拖动着离开了目标对象</p></li><li><p>ondrop：源对象拖动着在目标对象上方释放/松手</p></li></ol></li><li><p>源对象事件和目标对象事件间传递数据</p><p>  HTML5为所有的拖动相关事件提供了一个新的属性dataTransfer用于数据传递。</p><p>  使用：</p><pre><code>源对象设置值：// key为设置值的名称，value为具体值（两个参数必须为string类型）e.dataTransfer.setData( key, value);目标对象获取值：// key为设置值的名称e.dataTransfer.getData( key);</code></pre></li></ul><h3 id="4-demo"><a href="#4-demo" class="headerlink" title="4.demo"></a>4.demo</h3><p>开始动手前，把系统的默认事件阻止，否则部分API的事件无法触发。</p><pre><code>window.onload = function () {    //监听document的drop事件——取消其默认行为：在新窗口中打开图片    document.ondragover = function(e){        e.preventDefault(); //使得drop事件可以触发    }    document.ondrop = function(e) {        e.preventDefault(); //阻止在新窗口中打开图片，否则仍然会执行下载操作！！！    }}</code></pre><p>上个简单的例子：<strong>基础拖拽</strong></p><pre><code>html：       &lt;div id=&quot;drag&quot;             class=&quot;drag&quot;             onselectstart=&quot;return false&quot;             ondragstart=&quot;drag(event)&quot;             draggable=&quot;true&quot;&gt;被拖拽元素&lt;/div&gt;        &lt;div id=&quot;drop&quot;             ondrop=&quot;drop(event)&quot;             class=&quot;drop&quot;&gt;接收拖拽元素&lt;/div&gt;js:        function drag(e) {            let self = e.target;            // 传递当前拖拽id            e.dataTransfer.setData(&apos;dragId&apos;,self.id);        }        function drop(e) {            let self = e.target,                dragId = e.dataTransfer.getData(&apos;dragId&apos;);// 接收id            self.appendChild(document.getElementById(dragId));// 插入节点        }</code></pre><p>效果：<a href="https://wenfujie.github.io/document-library/js-library/H5-drag-drop/%E6%8B%96%E6%8B%BDdemo-%E5%9F%BA%E7%A1%80%E7%89%88.html" target="_blank" rel="noopener"><strong>Demo</strong></a></p><p>再来一个：<strong>拖拽批量上传图片</strong></p><p><strong>备注</strong>：仅需ondrop事件，以下用到ondragenter和ondragleave是用于修改样式，<br>还需用到H5文件处理API。</p><pre><code>html：    &lt;p&gt;将电脑图片拖到下方即可上传&lt;/p&gt;    &lt;div class=&quot;up-area&quot;         ondragenter=&quot;dragEnter(event)&quot;         ondragleave=&quot;dragLeave(event)&quot;         ondrop=&quot;getImg(event)&quot;&gt;&lt;/div&gt;js：    function getImg(e) {        setDragingStyle(e,{borderColor: &apos;#dcdcdc&apos;});// 取消拖放中样式        var imgArea = document.getElementsByClassName(&apos;up-area&apos;);        // 限制上传数量        if(imgArea[0].childNodes.length &gt;= 9){            alert(&apos;一次最多上传9张图片..&apos;)            return;        }        var f = e.dataTransfer.files[0];      //找到拖放的文件        var fr = new FileReader();        //创建文件读取器        fr.readAsDataURL(f);         //读取文件内容        fr.onload = function () {       //读取完成            var img = new Image();            img.src = fr.result;        //使用读取到的数据            img.style.width = &apos;100px&apos;;            img.style.height = &apos;100px&apos;;            e.target.appendChild(img);        }    }</code></pre><p>效果：<a href="https://wenfujie.github.io/document-library/js-library/H5-drag-drop/拖拽demo-上传图片版.html" target="_blank" rel="noopener"><strong>Demo</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端初级核心基础</title>
      <link href="/2019/04/10/%E4%BD%8E%E7%AB%AF%E5%8E%9F%E7%90%86/"/>
      <url>/2019/04/10/%E4%BD%8E%E7%AB%AF%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=1345848098&auto=0&height=66"></iframe><hr><h3 id="1-0-双向数据绑定"><a href="#1-0-双向数据绑定" class="headerlink" title="1.0 双向数据绑定"></a>1.0 双向数据绑定</h3><p>Vue 采用 <strong>数据劫持</strong> 结合 <strong>发布者-订阅者</strong> 模式的方式，通过 <code>Object.defineProperty()</code> 来劫持各个属性的 setter 以及 getter，在数据变动时发布消息给订阅者，触发相应的监听回调。</p><ol><li>第一步：需要 Observe 的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。</li><li>第二步：Compile 解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新数据。</li><li>第三步：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁，主要做的事情有：<ol><li>在自身实例化时往属性订阅器（dep）里面添加自己。</li><li>自身必须有一个 update() 方法</li><li>待属性变动 <code>dep.notice()</code> 通知时，能调用自身的 <code>update()</code> 方法，并触发 Compile 中绑定的回调，则功成身退。</li></ol></li><li>第四步：MVVM 作为数据绑定的入口，整合 Observer、Compile 和 Watcher 三者，通过 Observer 来监听自己的 model 数据变化，通过 Compile 来解析编译模板指令，最终利用 Watcher 搭起 Observer 和 Compile 之间的桥梁，达到数据变化 -&gt; 视图更新；视图交互变化（input） -&gt; 数据 model 变更的双向绑定效果。</li></ol><blockquote><p>js 实现简单的双向绑定</p></blockquote><pre><code>&lt;body&gt;  &lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;text&quot; id=&quot;txt&quot;&gt;    &lt;p id=&quot;show&quot;&gt;&lt;/p&gt;  &lt;/div&gt;  &lt;script&gt;    window.onload = function() {      let obj = {};      Object.defineProperty(obj, &quot;txt&quot;, {        get: function() {          return obj;        },        set: function(newValue) {          document.getElementById(&quot;txt&quot;).value = newValue;          document.getElementById(&quot;show&quot;).innerHTML  = newValue;        }      })      document.addEventListener(&quot;keyup&quot;, function(e) {        obj.txt = e.target.value;      })    }  &lt;/script&gt;&lt;/body&gt;</code></pre><blockquote><p>Object.defineProperty 接收三个参数：对象，属性名，配置对象<br>这里使用的是 Object.defineProperty，这是 Vue 2.0 进行双向数据绑定的写法。在 Vue 3.0 中，它使用 Proxy 进行数据劫持。</p></blockquote><ul><li>为什么 Vue 3.0 中使用 Proxy 了？</li></ul><ol><li>Vue 中使用 Object.defineProperty 进行双向数据绑定时，告知使用者是可以监听数组的，但是只是监听了数组的 push()、pop()、shift()、unshift()、splice()、sort()、reverse() 这八种方法，其他数组的属性检测不到。</li><li>Object.defineProperty 只能劫持对象的属性，因此对每个对象的属性进行遍历时，如果属性值也是对象需要深度遍历，那么就比较麻烦了，所以在比较 Proxy 能完整劫持对象的对比下，选择 Proxy。</li><li>为什么 Proxy 在 Vue 2.0 编写的时候出来了，尤大却没有用上去？因为当时 es6 环境不够成熟，兼容性不好，尤其是这个属性无法用 polyfill 来兼容。（polyfill 是一个 js 库，专门用来处理 js 的兼容性问题-js 修补器）</li></ol><blockquote><p>参考自<a href="https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F2df6dcddb0d7" target="_blank" rel="noopener">《实现双向绑定Proxy比defineproperty优劣如何》</a></p></blockquote><h3 id="2-0-template-编译"><a href="#2-0-template-编译" class="headerlink" title="2.0 template 编译"></a>2.0 template 编译</h3><ul><li>Vue template 编译的理解</li></ul><p>Vue 中 template 就是先转化成 AST 树，再得到 render 函数返回 VNode（Vue 的虚拟 DOM 节点）。</p><ol><li>通过 compile 编译器把 template 编译成 AST 语法树（abstract syntax tree - 源代码的抽象语法结构的树状表现形式），compile 是 createCompiler 的返回值，createCompiler 是用以创建编译器的。另外 compile 还负责合并 option。</li><li>AST 会经过 generate（将 AST 语法树转换成 render function 字符串的过程）得到 render 函数，render 的返回值是 VNode，VNode 是 Vue 的虚拟 DOM 节点，里面有标签名、子节点、文本等待。</li></ol><h3 id="3-0-基础优化"><a href="#3-0-基础优化" class="headerlink" title="3.0 基础优化"></a>3.0 基础优化</h3><h4 id="3-1-HTML-优化"><a href="#3-1-HTML-优化" class="headerlink" title="3.1 HTML 优化"></a>3.1 HTML 优化</h4><ol><li>避免 HTML 中书写 CSS 代码，因为这样难以维护。</li><li>使用 Viewport 加速页面的渲染。</li><li>使用语义化标签，减少 CSS 代码，增加可读性和 SEO。</li><li>减少标签的使用，DOM 解析是一个大量遍历的过程，减少不必要的标签，能降低遍历的次数。</li><li>避免 src、href 等的值为空，因为即时它们为空，浏览器也会发起 HTTP 请求。</li><li>减少 DNS 查询的次数。</li></ol><h4 id="3-2-CSS-优化"><a href="#3-2-CSS-优化" class="headerlink" title="3.2 CSS 优化"></a>3.2 CSS 优化</h4><ol><li>优化选择器路径：使用 <code>.c {}</code> 而不是 <code>.a .b .c {}</code>。</li><li>选择器合并：共同的属性内容提起出来，压缩空间和资源开销。</li><li>精准样式：使用 <code>padding-left: 10px</code> 而不是 <code>padding: 0 0 0 10px</code>。</li><li>雪碧图：将小的图标合并到一张图中，这样所有的图片只需要请求一次。</li><li>避免通配符：<code>.a .b * {}</code> 这样的选择器，根据从右到左的解析顺序在解析过程中遇到通配符 <code>* {}</code> 会遍历整个 DOM，性能大大损耗。</li><li>少用 float：<code>float</code> 在渲染时计算量比较大，可以使用 flex 布局。</li><li>为 0 值去单位：增加兼容性。</li><li>压缩文件大小，减少资源下载负担。</li></ol><h4 id="3-3-JavaScript-优化"><a href="#3-3-JavaScript-优化" class="headerlink" title="3.3 JavaScript 优化"></a>3.3 JavaScript 优化</h4><ol><li>尽可能把 <code>&lt;script&gt;</code> 标签放在 <code>body</code> 之后，避免 JS 的执行卡住 DOM 的渲染，最大程度保证页面尽快地展示出来。</li><li>尽可能合并 JS 代码：提取公共方法，进行面向对象设计等……</li><li>CSS 能做的事情，尽量不用 JS 来做，毕竟 JS 的解析执行比较粗暴，而 CSS 效率更高。</li><li>尽可能逐条操作 DOM，并预定好 CSs 样式，从而减少 reflow 或者 repaint 的次数。</li><li>尽可能少地创建 DOM，而是在 HTML 和 CSS 中使用 <code>display: none</code> 来隐藏，按需显示。</li><li>压缩文件大小，减少资源下载负担。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序基础组件、API、应用场景及生态圈简介</title>
      <link href="/2018/10/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E3%80%81API%E3%80%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E7%94%9F%E6%80%81%E5%9C%88%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/10/31/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E3%80%81API%E3%80%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%8F%8A%E7%94%9F%E6%80%81%E5%9C%88%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="小程序的使用场景"><a href="#小程序的使用场景" class="headerlink" title="小程序的使用场景"></a>小程序的使用场景</h3><ol><li>可以取代低频的app，不占空间（如排队、公交车）</li><li>适用功能单一的（因为小程序最大2M）</li><li>适合配合线下店铺一起适用的，扫描即可获取店铺信息</li><li>不适应于高频的app<br> 原因1：和原生app比，入口太深，<br> 原因2：小程序体验虽然比h5要好，但是没有app体验好</li><li>不适用流量和分发的产品（小程序不支持流量）</li></ol><h3 id="小程序SWOT分析"><a href="#小程序SWOT分析" class="headerlink" title="小程序SWOT分析"></a>小程序SWOT分析</h3><ol><li><p>优势Strenths</p><ul><li><p>无需安装、随用随点</p><p>  用户使用成本更低，无需下载安装，通过搜索、扫码、摇一摇、点击分享等形式。在Android系统中，若腾讯将微信小程序图标发布到操作系统桌面中，可令用户几乎分辨不出原生APP与小程序。</p></li><li><p>跨平台开发</p><p>  微信APP已屏蔽了IOS和Android的差异，在相同版本的微信APP下，开发者无需关心操作系统的类型与版本，一套代码可满足各平台需求。</p></li><li><p>丰富的组件和API</p></li></ul></li><li><p>劣势Weaknesses</p><ul><li><p>客户端计算能力不及APP：</p><p>  因微信小程序使用H5技术，代码运行环境为webkit引擎，无法运行复杂的大型计算，某些场景无法支持。</p></li></ul></li><li><p>机会Opportunities</p><ul><li><p>巨大流量入口：</p><p>  微信作为国内装机量最大的APP，月活用户已超过8亿，微信朋友圈用户粘度很高，利于小程序的推广使用。</p></li><li><p>技术较为成熟：</p><p>  小程序所需技能点为html+js+css，相关技术从业人员广、技术成熟，开发上手容易，学习成本低。</p></li><li><p>满足客户新鲜感体验：</p><p>  微信小程序推出不久，网络讨论热度高，部分用户会出于尝鲜心理体验小程序。</p></li></ul></li><li><p>威胁Threats</p><ul><li><p>数据安全性较低：</p><p>  小程序的编写语言为解释执行语言，发布小程序需把源码发布到腾讯服务器，运行环境为微信APP内嵌浏览器，开发者需对腾讯的信任级别达到操作系统级别。</p></li><li><p>自由度受制于微信：</p><p>  接口和权限均依赖于微信及其API，小程序能实现的功能场景，完全依赖于微信APP提供的能力。小程序的开发自由度是没有native app高的。</p></li><li><p>对自家APP造成冲击：</p><p>  因为小程序良好的体验和强大的可扩展性，客户容易分流，对自家APP的装机量和使用时长造成冲击。</p></li></ul></li></ol><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><p>一个小程序主体部分由三个文件组成，必须放在项目的根目录</p><p><a href="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png" data-fancybox="group" data-caption="app小程序入口结构" class="fancybox"><img src="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%871.png" alt="app小程序入口结构" title="app小程序入口结构"></a></p><p>一个小程序页面由四个文件组成</p><p><a href="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png" data-fancybox="group" data-caption="页面结构" class="fancybox"><img src="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%872.png" alt="页面结构" title="页面结构"></a></p><h3 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h3><p><a href="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png" data-fancybox="group" data-caption="常用组件" class="fancybox"><img src="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%873.png" alt="常用组件" title="常用组件"></a></p><h3 id="文档Api结构"><a href="#文档Api结构" class="headerlink" title="文档Api结构"></a>文档Api结构</h3><p><a href="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png" data-fancybox="group" data-caption="文档Api结构" class="fancybox"><img src="http://pheputc6t.bkt.clouddn.com/%E5%9B%BE%E7%89%874.png" alt="文档Api结构" title="文档Api结构"></a></p><h3 id="小程序高频基础开发组件、API"><a href="#小程序高频基础开发组件、API" class="headerlink" title="小程序高频基础开发组件、API"></a>小程序高频基础开发组件、API</h3><h4 id="view基础容器（更多）"><a href="#view基础容器（更多）" class="headerlink" title="view基础容器（更多）"></a>view基础容器（<a href="https://developers.weixin.qq.com/miniprogram/dev/component/view.html" title="更多" target="_blank" rel="noopener">更多</a>）</h4><pre><code>&lt;view class=&quot;flex-item bc_green&quot; hover-class=”className” hover-start-time=“{{50}}”&gt;1&lt;/view&gt;hover-class 按击时添加className类；hover-start-time 按住后多久出现点击态，单位毫秒</code></pre><h4 id="滚动容器（更多）"><a href="#滚动容器（更多）" class="headerlink" title="滚动容器（更多）"></a>滚动容器（<a href="https://developers.weixin.qq.com/miniprogram/dev/component/scroll-view.html" target="_blank" rel="noopener">更多</a>）</h4><pre><code>&lt;scroll-view scroll-y style=&quot;height: 200px;&quot; bindscrolltoupper=&quot;upper&quot; bindscrolltolower=&quot;lower&quot; bindscroll=&quot;scroll&quot; scroll-top=&quot;{{scrollTop}}&quot;&gt; &lt;/scroll-view&gt;scroll-y 允许纵向滚动Bindscrolltoupper 滚动到顶部/左边，会触发 scrolltoupper 事件Bindscrolltolower 滚动到底部/右边，会触发 scrolltolower 事件Bindscroll 滚动时触发scroll-top 设置竖向滚动条位置</code></pre><p>注意：使用竖向滚动时，需要给<scroll-view>一个固定高度，通过 WXSS 设置 height</scroll-view></p><h4 id="跳转页面（更多）"><a href="#跳转页面（更多）" class="headerlink" title="跳转页面（更多）"></a>跳转页面（<a href="https://developers.weixin.qq.com/miniprogram/dev/component/navigator.html" target="_blank" rel="noopener">更多</a>）</h4><p>使用navigator标签,与html5的a标签相似</p><pre><code>&lt;navigator url=&quot;/page/navigate/navigate?title=navigate&quot; hover-class=&quot;navigator-hover&quot;&gt;    跳转到新页面&lt;/navigator&gt;url 当前小程序内的跳转链接target 在哪个目标上发生跳转，默认当前小程序，可选值self/miniProgramhover-class 指定点击时的样式类，当hover-class=&quot;none&quot;时，没有点击态效果open-type 跳转方式</code></pre><p>open-type有效值:</p><ol><li>navigate 对应 wx.navigateTo 保留当前页面，跳转到应用内的某个页面</li><li>redirect 对应 wx.redirectTo 关闭当前页面，跳转到应用内的某个页面</li><li>switchTab 对应 wx.switchTab 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面</li><li>reLaunch 对应 wx.reLaunch 关闭所有页面，打开到应用内的某个页面</li><li>navigateBack 对应 wx.navigateBack 关闭当前页面，返回上一页面或多级页面。</li><li>exit 退出小程序，target=”miniProgram”时生效</li></ol><p>js跳转</p><pre><code>//保留当前页面,跳转相应页面wx.navigateTo({url:&apos;/page/navigate/navigate?title=navigate&apos;});//返回上一页wx.navigateBack({delta:1})//关闭当前页，跳转到某个页面wx.redirectTo({ url: &apos;/page/navigate/navigate?title=navigate&apos;})</code></pre><h4 id="图片（更多）"><a href="#图片（更多）" class="headerlink" title="图片（更多）"></a>图片（<a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html" target="_blank" rel="noopener">更多</a>）</h4><pre><code>&lt;image mode=&quot;scaleToFill&quot; src=&quot;{{src}}&quot; lazy-load=“{{true}} bindload=&quot;imgLoad&quot;&gt;&lt;/image&gt;mode 图片裁剪模式(默认：scaleToFill)lazy-load 图片懒加载。只针对page与scroll-view下的image有效bindload 当图片载入完毕时触发回调binderror 当图片载入错误时触发回调</code></pre><p>mode属性值：</p><p>原图</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/image/cat/0.jpg?t=18102614" data-fancybox="group" data-caption="原图" class="fancybox"><img src="https://developers.weixin.qq.com/miniprogram/dev/image/cat/0.jpg?t=18102614" alt="原图" title="原图"></a></p><p><strong>scaleToFill</strong><br>不保持纵横比缩放图片，使图片完全适应</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/image/cat/1.png?t=18102614" data-fancybox="group" data-caption="原图" class="fancybox"><img src="https://developers.weixin.qq.com/miniprogram/dev/image/cat/1.png?t=18102614" alt="原图" title="原图"></a></p><p><strong>aspectFit</strong><br>保持纵横比缩放图片，使图片的长边能完全显示出来</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/image/cat/2.png?t=18102614" data-fancybox="group" data-caption="原图" class="fancybox"><img src="https://developers.weixin.qq.com/miniprogram/dev/image/cat/2.png?t=18102614" alt="原图" title="原图"></a></p><p><strong>aspectFill</strong><br>保持纵横比缩放图片，只保证图片的短边能完全显示出来</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/image/cat/3.png?t=18102614" data-fancybox="group" data-caption="原图" class="fancybox"><img src="https://developers.weixin.qq.com/miniprogram/dev/image/cat/3.png?t=18102614" alt="原图" title="原图"></a></p><p>注意：image组件默认宽度300px、高度225px。image组件中二维码/小程序码图片不支持长按识别。仅在wx.previewImage中支持长按识别。</p><h4 id="全局配置（更多）"><a href="#全局配置（更多）" class="headerlink" title="全局配置（更多）"></a>全局配置（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">更多</a>）</h4><p>小程序配置文件app,json可配置项很多，说一下常用的window和tabBar的配置</p><p>Window</p><p>设置小程序的状态栏、导航条、标题、窗口背景色。</p><pre><code>{  &quot;window&quot;:{    &quot;navigationBarBackgroundColor&quot;: &quot;#ffffff&quot;,    &quot;navigationBarTextStyle&quot;: &quot;black&quot;,    &quot;navigationBarTitleText&quot;: &quot;微信接口功能演示&quot;,    &quot;backgroundColor&quot;: &quot;#eeeeee&quot;,    &quot;backgroundTextStyle&quot;: &quot;light&quot;  }}</code></pre><p><a href="https://developers.weixin.qq.com/miniprogram/dev/image/config.jpg?t=18103009" data-fancybox="group" data-caption class="fancybox"><img src="https://developers.weixin.qq.com/miniprogram/dev/image/config.jpg?t=18103009" alt title></a></p><p>tabBar</p><p>底部可切换tab栏设置</p><pre><code>&quot;tabBar&quot;: {  &quot;color&quot;:&quot;#000&quot;,  &quot;selectedColor&quot;:&quot;red&quot;,  &quot;backgroundColor&quot;:&quot;#fff&quot;,  &quot;borderStyle&quot;:&quot;#dcdcdc&quot;,  &quot;position&quot;:&quot;bottom&quot;,  &quot;list&quot;: [{    &quot;pagePath&quot;: &quot;pages/index/index&quot;,    &quot;text&quot;: &quot;商品&quot;,    &quot;iconPath&quot;: &quot;img/goods.png&quot;,    &quot;selectedIconPath&quot;: &quot;img/goods_active.png&quot;  },  {    &quot;pagePath&quot;: &quot;pages/order/order&quot;,    &quot;text&quot;: &quot;订单&quot;,    &quot;iconPath&quot;: &quot;img/order.png&quot;,    &quot;selectedIconPath&quot;: &quot;img/order_active.png&quot;  }]}</code></pre><p><a href="https://developers.weixin.qq.com/miniprogram/dev/image/tabbar.png?t=18103009" data-fancybox="group" data-caption class="fancybox"><img src="https://developers.weixin.qq.com/miniprogram/dev/image/tabbar.png?t=18103009" alt title></a></p><p>tabBar下可配置属性：</p><ul><li>color tab上的文字默认颜色</li><li>selectedColor tab上的文字选中时的颜色</li><li>backgroundColor tab的背景色</li><li>borderStyle tabbar上边框的颜色， 仅支持 black / white</li><li>position tabBar的位置，仅支持 bottom / top</li><li><p>list tab的列表，详见 list 属性说明，最少2个、最多5个 tab</p><p>  list属性的值</p><ol><li>pagePath 页面路径，必须在 pages 中先定义</li><li>text tab 上按钮文字</li><li>iconPath 图片路径，icon 大小限制为40kb，建议尺寸为 81px * 81px，不支持网络图片。</li><li>selectedIconPath 选中时的图片路径</li></ol></li></ul><h4 id="生命周期（更多）"><a href="#生命周期（更多）" class="headerlink" title="生命周期（更多）"></a>生命周期（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noopener">更多</a>）</h4><ol><li><p>onLoad(query)</p><p> 页面加载时触发。一个页面只会调用一次，query（打开当前页面路径中的参数）</p></li><li><p>onReady</p><p> 页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。<br>注意：对界面内容进行设置的 API 如wx.setNavigationBarTitle，请在onReady之后进行。</p></li><li><p>onShow</p><p> 页面显示/切入前台时触发。</p></li><li><p>onHide</p><p> 页面隐藏/切入后台时触发。 如 navigateTo 或底部 tab 切换到其他页面，小程序切入后台等。</p></li><li><p>onUnload</p><p> 页面卸载时触发。如redirectTo或navigateBack到其他页面时。</p></li></ol><h4 id="数据请求"><a href="#数据请求" class="headerlink" title="数据请求"></a>数据请求</h4><pre><code>wx.request({  url: &apos;https://www.apiopen.top/femaleNameApi?page=1&apos;,   data: {    x: &apos;&apos;,    y: &apos;&apos;  },  header: {    &apos;content-type&apos;: &apos;application/json&apos; // 默认值  },  success (res) {    console.log(res.data)  }})</code></pre><p>为保证数据的安全性，小程序中强制要求使用https,且所访问的https地址必须在小程序后台账号中被加入到可信域名中。否则请求失败。</p><p><a href="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1151228019,460177609&amp;fm=173&amp;s=182A5C3287FA442308EC74DC000080B1&amp;w=640&amp;h=316&amp;img.JPEG" data-fancybox="group" data-caption class="fancybox"><img src="https://ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=1151228019,460177609&amp;fm=173&amp;s=182A5C3287FA442308EC74DC000080B1&amp;w=640&amp;h=316&amp;img.JPEG" alt title></a></p><p>该配置项位于小程序账号的“设置”→“开发设置”→“服务器域名”选项中。</p><h4 id="setData函数（更多）"><a href="#setData函数（更多）" class="headerlink" title="setData函数（更多）"></a>setData函数（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#pageprototypesetdataobject-data-function-callback" target="_blank" rel="noopener">更多</a>）</h4><p>Page.prototype.setData(Object data, Function callback)</p><p>setData 函数用于将数据从逻辑层发送到视图层（异步），同时改变对应的 this.data 的值（同步）。</p><pre><code>// 修改数据可以是数组对应下标的某个属性或对象的单个属性。this.setData({  &apos;array[0].text&apos;:&apos;changed data&apos;},function(){    Console.log(“渲染完成后打印”)})</code></pre><p>属性：</p><ol><li>data Object 这次要改变的数据</li><li>callback Function setData引起的界面更新渲染完毕后的回调函数</li></ol><p>注意：</p><ol><li>直接修改 this.data 而不调用 this.setData 是无法改变页面的状态的，还会造成数据不一致。</li><li>仅支持设置可 JSON 化的数据。</li><li>单次设置的数据不能超过1024kB，请尽量避免一次设置过多的数据。</li><li>请不要把 data 中任何一项的 value 设为 undefined ，否则这一项将不被设置并可能遗留一些潜在问题。</li></ol><h4 id="事件-更多"><a href="#事件-更多" class="headerlink" title="事件(更多)"></a>事件(<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html" target="_blank" rel="noopener">更多</a>)</h4><pre><code>// 点击事件bindtap&lt;view id=&quot;tapTest&quot; data-hi=&quot;WeChat&quot; bindtap=&quot;tapName&quot;&gt; Click me! &lt;/view&gt;Page({  tapName: function(event) {    // 可以从event中获取到data-hi的值    console.log(event)  }})</code></pre><p>事件绑定方式有两种，分别以以bind或catch开头，bind和catch后可以紧跟一个冒号，其含义不变。</p><pre><code>bindtap=&quot;functionName&quot; 或 bind:tap=&quot;functionName&quot;catchtouchstart=&quot;functionName&quot; 或 catch:touchstart=&quot;functionName&quot;</code></pre><p>bind事件绑定不会阻止冒泡事件向上冒泡，catch事件绑定可以阻止冒泡事件向上冒泡。</p><p>需要在捕获阶段监听事件时，可以采用capture-bind、capture-catch关键字，后者将中断捕获阶段和取消冒泡阶段。</p><h4 id="自定义组件（更多）"><a href="#自定义组件（更多）" class="headerlink" title="自定义组件（更多）"></a>自定义组件（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/" target="_blank" rel="noopener">更多</a>）</h4><ol><li><p>创建自定义组件</p><p> 类似于页面，一个自定义组件由 json wxml wxss js 4个文件组成。要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明（将 component 字段设为 true 可这一组文件设为自定义组件）：</p><pre><code>{    &quot;component&quot;: true}</code></pre><p> 在 wxml 和 wxss 添加模板和样式，其中在 js 中需要使用 Component() 来注册组件，并提供组件的属性定义、内部数据和自定义方法。</p><p> Component构造器（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/component.html" target="_blank" rel="noopener">更多</a>）代码示例</p><pre><code>Component({  properties: {    // 这里定义了innerText属性，属性值可以在组件使用时指定    innerText: {      type: String,      value: &apos;default value&apos;,    }  },  data: {    // 这里是一些组件内部数据    someData: {}  },  methods: {    // 这里是一个自定义方法    customMethod: function(){}  }})</code></pre></li><li><p>引用自定义组件</p><p> 先要在页面的 json 文件中进行引用声明。</p><pre><code>{  &quot;usingComponents&quot;: {    &quot;component-tag-name&quot;: &quot;path/to/the/custom/component&quot;  }}</code></pre><p> 在wxml模板中使用</p><pre><code>&lt;view&gt;  &lt;!-- 以下是对一个自定义组件的引用 --&gt;  &lt;component-tag-name inner-text=&quot;Some text&quot;&gt;&lt;/component-tag-name&gt;&lt;/view&gt;</code></pre></li><li><p>组件间通信</p><ul><li><p>WXML 数据绑定：用于父组件向子组件的指定属性设置数据</p><pre><code>&lt;component-tag-name inner-text=&quot;Some text&quot;&gt;&lt;/component-tag-name&gt;</code></pre></li><li><p>事件：用于子组件向父组件传递数据，可以传递任意数据。</p><pre><code>&lt;!-- 当自定义组件触发“myevent”事件时，调用“onMyEvent”方法 --&gt;&lt;component-tag-name bindmyevent=&quot;onMyEvent&quot; /&gt;// 使用 triggerEvent 方法触发事件myeventthis.triggerEvent(&apos;myevent&apos;, myEventDetail, myEventOption)</code></pre></li><li>如果以上两种方式不足以满足需要，父组件还可以通过 this.selectComponent 方法获取子组件实例对象，这样就可以直接访问组件的任意数据和方法。</li></ul></li><li><p>behaviors 组件的混合属性（<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html" target="_blank" rel="noopener">更多</a>）</p><p> 类似于vue的 “mixins” </p><p> 每个 behavior 可以包含一组属性、数据、生命周期函数和方法，组件引用它时，它的属性、数据和方法会被合并到组件中，生命周期函数也会在对应时机被调用。每个组件可以引用多个 behavior 。 behavior 也可以引用其他 behavior 。</p><ul><li><p>定义 behaviors 使用 Behavior() 构造器定义。</p><pre><code>// my-behavior.jsmodule.exports = Behavior({  behaviors: [],  properties: {    myBehaviorProperty: {      type: String    }  },  data: {    myBehaviorData: {}  },  attached: function(){},  methods: {    myBehaviorMethod: function(){}  }}) </code></pre></li><li><p>引入 behaviors </p><pre><code>// my-component.jsvar myBehavior = require(&apos;my-behavior&apos;)Component({  behaviors: [myBehavior],  properties: {    myProperty: {      type: String    }  }})</code></pre></li><li><p>字段的覆盖和组合规则</p><p>组件和它引用的 behavior 中可以包含同名的字段，对这些字段的处理方法如下：</p><ul><li>如果有同名的属性或方法，组件本身的属性或方法会覆盖 behavior 中的属性或方法，如果引用了多个 behavior ，在定义段中靠后 behavior 中的属性或方法会覆盖靠前的属性或方法；</li><li>如果有同名的数据字段，如果数据是对象类型，会进行对象合并，如果是非对象类型则会进行相互覆盖；</li><li>生命周期函数不会相互覆盖，而是在对应触发时机被逐个调用。如果同一个 behavior 被一个组件多次引用，它定义的生命周期函数只会被执行一次。</li></ul></li></ul></li></ol><h4 id="插件的使用"><a href="#插件的使用" class="headerlink" title="插件的使用"></a>插件的使用</h4><p>小程序开发者可便捷地把插件添加到自己的小程序内，丰富小程序的服务。</p><p>接入流程</p><ol><li><p>在小程序管理后台添加插件</p><p> 小程序开发者可在”小程序管理后台-设置-第三方服务-插件管理“中，根据AppID查找需要的插件，并申请使用。</p></li><li><p>在小程序代码中使用插件</p><p> 对于插件的使用者，使用插件前要在 app.json 中声明需要使用的插件，例如：</p></li></ol><pre><code>    {      &quot;plugins&quot;: {        &quot;myPlugin&quot;: {              &quot;version&quot;: &quot;1.0.0&quot;,              &quot;provider&quot;: &quot;wxxxxxxxxxxxxxxxxx&quot;        }      }    }如上例所示， plugins 定义段中可以包含多个插件声明，每个插件声明中都必须指明插件的 appid 和需要使用的版本号。</code></pre><ol><li><p>使用插件的 js 接口<br>在引入插件代码包之后，就可以在这个小程序中使用插件提供的自定义组件或者 js 接口。</p><p> 如果需要使用插件的 js 接口，可以使用 requirePlugin 方法：</p><pre><code>var myPluginInterface = requirePlugin(&apos;myPlugin&apos;)myPluginInterface.hello()</code></pre></li><li><p>使用插件的自定义组件</p><p> 使用插件提供的自定义组件，和使用普通自定义组件的方式相仿。在 json 文件定义需要引入的自定义组件时，使用 plugin:// 协议即可，例如：</p><pre><code>{  &quot;usingComponents&quot;: {    &quot;hello-component&quot;: &quot;plugin://myPlugin/hello-component&quot;  }}</code></pre><p> 注意，出于对插件的保护，插件提供的自定义组件在使用上有一定的限制：</p><ul><li>页面中的 this.selectComponent 接口无法获得插件的自定义组件实例对象；</li><li>wx.createSelectorQuery 等接口的 &gt;&gt;&gt; 选择器无法选入插件内部。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>良好js代码风格的养成</title>
      <link href="/2018/06/13/%E8%89%AF%E5%A5%BDjs%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%85%BB%E6%88%90/"/>
      <url>/2018/06/13/%E8%89%AF%E5%A5%BDjs%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E7%9A%84%E5%85%BB%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>软件生命周期中80%的成本都消耗在了维护上；而且几乎所有的维护者都不是代码的直接开发人。<br>如何让自己写的代码让别人阅读起来更高效？当然是写代码的时候注入一些规范。<br>那么在Javascript中有哪些编程风格值得我们去注重呢？这篇文章将总结《编写可维护的JavaScript》里面的观点。</p><h2 id="缩进风格"><a href="#缩进风格" class="headerlink" title="缩进风格"></a>缩进风格</h2><p>上图是Stack Overflow的调查，可见，大部分的Programmer都喜欢用tab进行缩进。每行缩进由4个空格组成。</p><h2 id="语句结尾"><a href="#语句结尾" class="headerlink" title="语句结尾"></a>语句结尾</h2><p>建议不要省略分号。很多人喜欢写js代码很依赖于自动分号插入，也就是语句后面不加分号。<br>但是这是大多数的情况，像return这样的语句是会出错的。类似的还有其他一些语法，这里就不细说自动分号插入机制了，<br>感兴趣的童鞋可以前往<a href="https://cnodejs.org/topic/56dbbd25820d3c9b3d63e369" target="_blank" rel="noopener">JavaScript ASI 机制详解</a>。</p><h2 id="行的长度"><a href="#行的长度" class="headerlink" title="行的长度"></a>行的长度</h2><p>这个之前在另外一篇博客中有介绍过，为了保证在小屏笔记本和大屏幕上看到的代码是一致的，<br>通常建议每一行代码不要超过80列。</p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>代码长度超过80列，换行也是有讲究的。建议换行的代码增加两个缩进长度。例如：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">callFunction(element1, element2, element3, element4,</span><br><span class="line">        element5);</span><br></pre></td></tr></table></figure></div></p><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>整个函数代码没有空行地紧凑在一起会给阅读代码的人一定的视觉疲劳。也让人厌倦，起码我看到这样的代码就不想再看下去了。对于空行地建议：</p><ul><li>在方法之间</li><li>在方法中的局部变量和第一条语句之间</li><li>在注释之前</li><li>在方法内的逻辑片段之间插入空行，提高可读性</li></ul><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>命名是我觉得规范中最难的点，怎么让变量或者函数名称还有意境。结合不同的场景，设置不一样的名称。<br>让维护代码的人像看小说一般地阅读代码，就说明命名是成功的！除了变量含义之外，其他的一些规范比如：</p><ul><li>驼峰写法</li><li>变量用名词</li><li>函数用动词+名词</li><li>对象私有属性或方法前面加_</li><li>常量用全部大写字母且分割单词用下划线</li><li>构造函数首字母大写，且以非动词开头</li></ul><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><ul><li>独占一行，用来解释下一行代码<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    // 如果代码执行到这里，代表通过了condition的校验</span><br><span class="line">    next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul><p>注意注释之前要加空行、注释也要缩进。</p><ul><li>与代码同一行，用来解释之前的代码<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var result = something + somethingElse;    // somethingElse will never be null</span><br></pre></td></tr></table></figure></div></li></ul><p>注意注释与代码直接至少添加一个缩进。</p><ul><li>多行，用来注释掉一个代码块<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">//     doSomething();</span><br><span class="line">//     doSomethingElse();</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure></div></li></ul><p>注释一个代码块时是在连续多行使用单行注释唯一可以接受的情况。但是最好别这样使用。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 如果代码执行到这里</span><br><span class="line">     * 说明balabala</span><br><span class="line">     */</span><br><span class="line">     doSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>要注意缩进、换行、空格、空行。</p><h3 id="使用注释声明"><a href="#使用注释声明" class="headerlink" title="使用注释声明"></a>使用注释声明</h3><p>注释说明，主要用来做记号。主要有以下几种：</p><ol><li><p>TODO说明代码还未完成，说明接下来要做的事情。</p></li><li><p>HACK表明代码实现走了一个捷径。应当包含为何使用hack的原因。同时也表明也许会有更好的解决办法。</p></li><li><p>FIXME说明代码存在bug，应当尽快修复。</p></li><li><p>REVIEW说明代码任何可能的改动都需要评审。</p></li></ol><h2 id="变量、函数和运算符"><a href="#变量、函数和运算符" class="headerlink" title="变量、函数和运算符"></a>变量、函数和运算符</h2><ul><li>变量声明 变量声明习惯一般有两种：一种是“就近”原则，放在离使用最近的地方；第二种就是放在最上面，<br>作为函数内的第一条语句。个人推荐后者，这跟JavaScript引擎解析代码的习惯是一致的。</li></ul><ul><li>函数声明 函数声明也会被JS引擎提前，建议在函数调用之前声明函数。另外，推荐函数内部的局部函数应当紧接着变量声明之后声明。</li></ul><ul><li>立即调用的函数 立即执行函数，在开发中肯定会经常使用。好的写法是：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var value = (<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    // 函数体</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">        message: <span class="string">'Hi'</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></div><p>清晰明了地的让人知道这是一个立即执行函数。</p><ul><li>严格模式 ES5引入了严格模式，通过这种方式解析执行js代码，来达到减少错误的目的。<br>代码要以strict mode去解析也很简单，只要将use strict放到js代码中即可。<br>当js解析器看到这样一条没有赋给变量的字符串之后，就会以严格模式去解析代码。<br>一个原则：尽量少地影响到更多代码！什么意思呢？use strict可以放到任何位置，全局或者函数局部都可以。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="string">"use strict"</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">doSomething</span></span>() &#123;</span><br><span class="line">    // 代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">doSomething</span></span>() &#123;</span><br><span class="line">    <span class="string">"use strict"</span>;</span><br><span class="line">    // 代码</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>如果有多个函数要使用严格模式，就用立即函数限制起来，避免影响到全局。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">    <span class="string">"use strict"</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">doSomething</span></span>() &#123;</span><br><span class="line">        // 代码</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="function"><span class="title">doSomethingElse</span></span>() &#123;</span><br><span class="line">        // 代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></div></p><ul><li>相等 使用===、!==代替==、!=，避免类型转换。类型转换的相关内容这里就不说了，自行了解。</li></ul><h2 id="UI层的松耦合"><a href="#UI层的松耦合" class="headerlink" title="UI层的松耦合"></a>UI层的松耦合</h2><p>松耦合的原则：修改一个组件时尽可能不需要修改其他组件代码。</p><ul><li><p>将JavaScript从CSS中抽离 避免使用CSS表达式</p></li><li><p>将CSS从JavaScript中抽离 避免直接修改dom的样式，通过类名去实现想要的效果。</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">element.style.cssText = <span class="string">"color: red; left: 10px"</span>;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line">.reveal &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    left: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">element.className += <span class="string">" reveal"</span>;</span><br></pre></td></tr></table></figure></div><ul><li>将JavaScript从HTML中抽离 避免直接在HTML写事件处理程序和逻辑代码</li></ul><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>两个规则：</p><ul><li>隔离程序逻辑 将应用逻辑从所有事件处理程序中抽离出来是最佳实践，举个例子：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="keyword">function</span> handleClick(event) &#123;</span><br><span class="line">    var popup = document.getElementById(<span class="string">"popup"</span>);</span><br><span class="line">    popup.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">    popup.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">    popup.className = <span class="string">"reveal"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="keyword">function</span> handleClick(event) &#123;</span><br><span class="line">    showPopup(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> showPopup(event) &#123;</span><br><span class="line">    popup.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">    popup.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">    popup.className = <span class="string">"reveal"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>不要滥用事件对象 将事件对象event一直传递下去是个很烂的实践。<br>别人并不知道你具体使用到事件对象的什么属性或者方法。继续用上面的例子：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line"><span class="keyword">function</span> handleClick(event) &#123;</span><br><span class="line">    showPopup(event);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> showPopup(event) &#123;</span><br><span class="line">    popup.style.left = event.clientX + <span class="string">"px"</span>;</span><br><span class="line">    popup.style.top = event.clientY + <span class="string">"px"</span>;</span><br><span class="line">    popup.className = <span class="string">"reveal"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// good</span><br><span class="line"><span class="keyword">function</span> handleClick(event) &#123;</span><br><span class="line">    showPopup(event.clientX, event.clientY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> showPopup(x, y) &#123;</span><br><span class="line">    popup.style.left = x + <span class="string">"px"</span>;</span><br><span class="line">    popup.style.top = y + <span class="string">"px"</span>;</span><br><span class="line">    popup.className = <span class="string">"reveal"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="结束"><a href="#结束" class="headerlink" title="结束~"></a>结束~</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基础算法</title>
      <link href="/2018/06/06/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
      <url>/2018/06/06/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><a href="https://user-gold-cdn.xitu.io/2017/7/27/da44baba996d9c4e8ddeb43a01c2139d" data-fancybox="group" data-caption="插入排序" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2017/7/27/da44baba996d9c4e8ddeb43a01c2139d" alt="插入排序" title="插入排序"></a></p><p>算法描述： </p><ol><li>从第一个元素开始，该元素可以认为已经被排序 </li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描 </li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置 </li><li>重复步骤 3，直到找到已排序的元素小于或者等于新元素的位置 </li><li>将新元素插入到该位置后 </li><li>重复步骤 2~5</li></ol><p>现有一组数组 arr = [5, 6, 3, 1, 8, 7, 2, 4]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[5] 6 3 1 8 7 2 4  //第一个元素被认为已经被排序</span><br><span class="line"></span><br><span class="line">[5,6]  3 1 8 7 2 4 //6与5比较，放在5的右边</span><br><span class="line"></span><br><span class="line">[3，5，6]  1 8 7 2 4 //3与6和5比较，都小，则放入数组头部</span><br><span class="line"></span><br><span class="line">[1,3,5,6]   8 7 2 4 //1与3,5,6比较，则放入头部</span><br><span class="line"></span><br><span class="line">[1,3，5，6，8]   7 2 4</span><br><span class="line"></span><br><span class="line">[1,3，5，6,7，8]  2 4</span><br><span class="line"></span><br><span class="line">[1，2,3，5，6,7，8] 4</span><br><span class="line"></span><br><span class="line">[1，2,3，4，5，6,7，8]</span><br></pre></td></tr></table></figure></div><p>编程思路：双层循环，外循环控制未排序的元素，内循环控制已排序的元素，将未排序元素设为标杆，与已排序的元素进行比较，小于则交换位置，大于则位置不动</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> insertSort(arr)&#123;</span><br><span class="line">    var tmp;</span><br><span class="line">    <span class="keyword">for</span>(var i=1;i&lt;arr.length;i++)&#123;</span><br><span class="line">        tmp  = arr[i];</span><br><span class="line">        <span class="keyword">for</span>(var j=i;j&gt;=0;j--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j-1]&gt;tmp)&#123;</span><br><span class="line">                arr[j]=arr[j-1];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                arr[j]=tmp;</span><br><span class="line">                <span class="built_in">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>时间复杂度O(n^2)</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><a href="https://user-gold-cdn.xitu.io/2017/7/27/e0824efdb79268d4de42991274dcc9eb" data-fancybox="group" data-caption="插入排序" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2017/7/27/e0824efdb79268d4de42991274dcc9eb" alt="插入排序" title="插入排序"></a></p><p>算法描述：直接从待排序数组中选择一个最小（或最大）数字，放入新数组中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[1] 5 6 3  8 7 2 4 </span><br><span class="line">[1,2] 5 6 3  8 7  4 </span><br><span class="line">[1,2,3] 5 6  8 7 2 4 </span><br><span class="line">[1,2,3,4] 5 6 8 7</span><br><span class="line">[1,2,3,4,5] 6  8 7 </span><br><span class="line">[1,2,3,4,5,6] 8 7  </span><br><span class="line">[1,2,3,4,5,6,7] 8  </span><br><span class="line">[1,2,3,4,5,6,7,8]</span><br></pre></td></tr></table></figure></div><p>编程思路：先假设第一个元素为最小的，然后通过循环找出最小元素，然后同第一个元素交换，接着假设第二个元素，重复上述操作即可</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> selectSort(array) &#123;</span><br><span class="line">  var length = array.length,</span><br><span class="line">      i,</span><br><span class="line">      j,</span><br><span class="line">      minIndex,</span><br><span class="line">      minValue,</span><br><span class="line">      temp;</span><br><span class="line">  <span class="keyword">for</span> (i = 0; i &lt; length - 1; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    minValue = array[minIndex];</span><br><span class="line">    <span class="keyword">for</span> (j = i + 1; j &lt; length; j++) &#123;//通过循环选出最小的</span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt; minValue) &#123;</span><br><span class="line">        minIndex = j;</span><br><span class="line">        minValue = array[minIndex];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 交换位置</span><br><span class="line">    temp = array[i];</span><br><span class="line">    array[i] = minValue;</span><br><span class="line">    array[minIndex] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">return</span> array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>时间复杂度O(n^2)</p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><a href="https://user-gold-cdn.xitu.io/2017/7/27/f9fcaf0d64dcd11b9309f09062863b29" data-fancybox="group" data-caption="插入排序" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2017/7/27/f9fcaf0d64dcd11b9309f09062863b29" alt="插入排序" title="插入排序"></a></p><p>算法描述： </p><ol><li>把 n 个记录看成 n 个长度为 l 的有序子表 </li><li>进行两两归并使记录关键字有序，得到 n/2 个长度为 2 的有序子表 </li><li>重复第 2 步直到所有记录归并成一个长度为 n 的有序表为止。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">5 6 3 1 8 7 2 4</span><br><span class="line"></span><br><span class="line">[5,6] [3,1] [8,7] [2,4]</span><br><span class="line"></span><br><span class="line">[5,6] [1,3] [7,8] [2,4]</span><br><span class="line"></span><br><span class="line">[5,6,1,3] [7,8,2,4]</span><br><span class="line"></span><br><span class="line">[1,3,5,6] [2,4,7,8]</span><br><span class="line"></span><br><span class="line">[1,2,3,4,5,6,7,8]</span><br></pre></td></tr></table></figure></div><p>编程思路：将数组一直等分，然后合并</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> merge(left, right) &#123;</span><br><span class="line">  var tmp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[0] &lt; right[0])</span><br><span class="line">      tmp.push(left.shift());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      tmp.push(right.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> tmp.concat(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> mergeSort(a) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length === 1) </span><br><span class="line">    <span class="built_in">return</span> a;</span><br><span class="line"></span><br><span class="line">  var mid = Math.floor(a.length / 2)</span><br><span class="line">    , left = a.slice(0, mid)</span><br><span class="line">    , right = a.slice(mid);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>时间复杂度O(nlogn)</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><a href="https://user-gold-cdn.xitu.io/2017/7/27/ad4d6e25b6e0e91c743ae220e3d52d1e" data-fancybox="group" data-caption="插入排序" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2017/7/27/ad4d6e25b6e0e91c743ae220e3d52d1e" alt="插入排序" title="插入排序"></a></p><p>算法描述：</p><p>在数据集之中，选择一个元素作为”基准”（pivot）。<br>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。这个操作称为分区 (partition)操作，分区操作结束后，基准元素所处的位置就是最终排序后它的位置。<br>对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">5 6 3 1 8 7 2 4</span><br><span class="line"></span><br><span class="line">pivot</span><br><span class="line">|</span><br><span class="line">5 6 3 1 9 7 2 4</span><br><span class="line">|</span><br><span class="line">storeIndex</span><br><span class="line"></span><br><span class="line">5 6 3 1 9 7 2 4//将5同6比较，大于则不更换</span><br><span class="line">|</span><br><span class="line">storeIndex</span><br><span class="line"></span><br><span class="line">3 6 5 1 9 7 2 4//将5同3比较，小于则更换</span><br><span class="line">  |</span><br><span class="line">  storeIndex</span><br><span class="line"></span><br><span class="line">3 6 1 5 9 7 2 4//将5同1比较，小于则不更换</span><br><span class="line">    |</span><br><span class="line">   storeIndex</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">3 6 1 4 9 7 2 5//将5同4比较，小于则更换</span><br><span class="line">      |</span><br><span class="line">      storeIndex</span><br><span class="line"></span><br><span class="line">3 6 1 4 5 7 2 9//将标准元素放到正确位置</span><br><span class="line">      |</span><br><span class="line">storeIndex pivot</span><br></pre></td></tr></table></figure></div><p>上述讲解了分区的过程，然后就是对每个子区进行同样做法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> quickSort(arr)&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length&lt;=1) <span class="built_in">return</span> arr;</span><br><span class="line">    var partitionIndex=Math.floor(arr.length/2);</span><br><span class="line">    var tmp=arr[partitionIndex];</span><br><span class="line">    var left=[];</span><br><span class="line">    var right=[];</span><br><span class="line">    <span class="keyword">for</span>(var i=0;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]&lt;tmp)&#123;</span><br><span class="line">            left.push(arr[i])</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right.push(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> quickSort(left).concat([tmp],quickSort(right))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>上述版本会造成堆栈溢出，所以建议使用下面版本</p><p>原地分区版：主要区别在于先进行分区处理，将数组分为左小右大</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> quickSort(arr)&#123;</span><br><span class="line">    <span class="keyword">function</span> swap(arr,right,left)&#123;</span><br><span class="line">        var tmp = arr[right];</span><br><span class="line">        arr[right]=arr[left];</span><br><span class="line">        arr[left]=tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> partition(arr,left,right)&#123;//分区操作，</span><br><span class="line">        var pivotValue=arr[right]//最右面设为标准</span><br><span class="line">        var storeIndex=left;</span><br><span class="line">        <span class="keyword">for</span>(var i=left;i&lt;right;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i]&lt;=pivotValue)&#123;</span><br><span class="line">                swap(arr,storeIndex,i);</span><br><span class="line">                storeIndex++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(arr,right,storeIndex);</span><br><span class="line">        <span class="built_in">return</span> storeIndex//返回标杆元素的索引值</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> sort(arr,left,right)&#123;</span><br><span class="line">        <span class="keyword">if</span>(left&gt;right) <span class="built_in">return</span>;</span><br><span class="line">        var storeIndex=partition(arr,left,right);</span><br><span class="line">        sort(arr,left,storeIndex-1);</span><br><span class="line">        sort(arr,storeIndex+1,right);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr,0,arr.length-1);</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>时间复杂度O(nlogn)</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><a href="https://user-gold-cdn.xitu.io/2017/7/27/3bcdc49661b5c8a3500463095ecc09df" data-fancybox="group" data-caption="插入排序" class="fancybox"><img src="https://user-gold-cdn.xitu.io/2017/7/27/3bcdc49661b5c8a3500463095ecc09df" alt="插入排序" title="插入排序"></a></p><p>算法描述： </p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。 </li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。 </li><li>针对所有的元素重复以上的步骤，除了最后一个。 </li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">5 6 3 1 8 7 2 4</span><br><span class="line"></span><br><span class="line">[5 6] 3 1 8 7 2 4 //比较5和6</span><br><span class="line"></span><br><span class="line">5 [6 3] 1 8 7 2 4</span><br><span class="line"></span><br><span class="line">5 3 [6 1] 8 7 2 4</span><br><span class="line"></span><br><span class="line">5 3 1 [6 8] 7 2 4</span><br><span class="line"></span><br><span class="line">5 3 1 6 [8 7] 2 4</span><br><span class="line"></span><br><span class="line">5 3 1 6 7 [8 2] 4</span><br><span class="line"></span><br><span class="line">5 3 1 6 7 2 [8 4]</span><br><span class="line"></span><br><span class="line">5 3 1 6 7 2 4 8  // 这样最后一个元素已经在正确位置，所以下一次开始时候就不需要再比较最后一个</span><br></pre></td></tr></table></figure></div><p>编程思路：外循环控制需要比较的元素，比如第一次排序后，最后一个元素就不需要比较了，内循环则负责两两元素比较，将元素放到正确位置上</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> bubbleSort(arr)&#123;</span><br><span class="line">    var len=arr.length;</span><br><span class="line">    <span class="keyword">for</span>(var i=len-1;i&gt;0;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(var j=0;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+1])&#123;</span><br><span class="line">                var tmp = arr[j];</span><br><span class="line">                arr[j]=arr[j+1];</span><br><span class="line">                arr[j+1]=tmp</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>时间复杂度O(n^2)</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束~ ~"></a>结束~ ~</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue基础</title>
      <link href="/2018/06/03/Vue%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/06/03/Vue%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<hr><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=461525011&auto=1&height=66"></iframe><hr><h2 id="vue与jquery的区别"><a href="#vue与jquery的区别" class="headerlink" title="vue与jquery的区别.."></a>vue与jquery的区别..</h2><p>vue绑定变量，用修改变量方式修改视图和数据（响应式）<br>jquery选择dom，操作dom修改视图</p><h2 id="模板指令"><a href="#模板指令" class="headerlink" title="模板指令"></a>模板指令</h2><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>如果要更新部分的 textContent ，需要使用 { { Mustache } } 插值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-text=<span class="string">"msg"</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;!-- 等同 --&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;</span><br></pre></td></tr></table></figure></div><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>根据表达式的值的真假条件渲染元素。在切换时元素及它的数据绑定 / 组件被销毁并重建</p><h3 id="v-else"><a href="#v-else" class="headerlink" title="v-else"></a>v-else</h3><p>限制：前一兄弟元素必须有 v-if 或 v-else-if。<br>为 v-if 或者 v-else-if 添加“else 块”。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-if=<span class="string">"show"</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;span v-else&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></div><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>根据表达式值得真假，切换元素的 display CSS 属性。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span v-show=<span class="string">"show"</span>&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure></div><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>限制：input select textarea components<br>修饰符：<br>.number - 输入字符串转为数字<br>.trim - 输入首尾空格过滤<br>在表单控件或者组件上创建双向绑定<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"value"</span>&gt;</span><br></pre></td></tr></table></figure></div></p><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><p>遍历的类型：Array | Object<br>数组：默认可传两个参数（数组元素迭代的别名，索引）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=<span class="string">"(item,index) in arrs"</span>&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div><p>可以用 of 替代 in 作为分隔符</p><p>也可以用 v-for 通过一个对象的属性来迭代<br>对象：默认可传三个参数（对象中属性，键名，索引）<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=<span class="string">"(value,key,index) in object"</span>&gt;</span><br><span class="line">        &#123;&#123;index&#125;&#125;.&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></div></p><h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on      缩写@"></a>v-on      缩写@</h3><p>添加事件监听<br>修饰符：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">.stop - 调用 event.stopPropagation()，阻止冒泡</span><br><span class="line"></span><br><span class="line">.prevent - 调用 event.preventDefault()，阻止默认事件</span><br><span class="line"></span><br><span class="line">.capture - 添加事件侦听器时使用 capture 模式。</span><br><span class="line"></span><br><span class="line">.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</span><br><span class="line"></span><br><span class="line">.&#123;keyCode | keyAlias&#125; - 只当事件是从特定键触发时才触发回调。</span><br><span class="line"></span><br><span class="line">.native - 监听组件根元素的原生事件。</span><br><span class="line"></span><br><span class="line">.once - 只触发一次回调。</span><br><span class="line"></span><br><span class="line">.left - (2.2.0) 只当点击鼠标左键时触发。</span><br><span class="line"></span><br><span class="line">.right - (2.2.0) 只当点击鼠标右键时触发。</span><br><span class="line"></span><br><span class="line">.middle - (2.2.0) 只当点击鼠标中键时触发。</span><br><span class="line"></span><br><span class="line">.passive - (2.3.0) 以 &#123; passive: <span class="literal">true</span> &#125; 模式添加侦听器</span><br><span class="line"></span><br><span class="line">&lt;!-- 方法处理器 --&gt;</span><br><span class="line">&lt;button v-on:click=<span class="string">"doThis"</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 对象语法 (2.4.0+) --&gt;</span><br><span class="line">&lt;button v-on=<span class="string">"&#123; mousedown: doThis, mouseup: doThat &#125;"</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联语句 --&gt;</span><br><span class="line">&lt;button v-on:click=<span class="string">"doThat('hello', <span class="variable">$event</span>)"</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;button @click=<span class="string">"doThis"</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 停止冒泡 --&gt;</span><br><span class="line">&lt;button @click.stop=<span class="string">"doThis"</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 阻止默认行为 --&gt;</span><br><span class="line">&lt;button @click.prevent=<span class="string">"doThis"</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--  串联修饰符 --&gt;</span><br><span class="line">&lt;button @click.stop.prevent=<span class="string">"doThis"</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 键修饰符，键别名 --&gt;</span><br><span class="line">&lt;input @keyup.enter=<span class="string">"onEnter"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 键修饰符，键代码 --&gt;</span><br><span class="line">&lt;input @keyup.13=<span class="string">"onEnter"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 点击回调只会触发一次 --&gt;</span><br><span class="line">&lt;button v-on:click.once=<span class="string">"doThis"</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></div></p><h3 id="v-bing-缩写"><a href="#v-bing-缩写" class="headerlink" title="v-bing      缩写 :"></a>v-bing      缩写 :</h3><p>动态绑定属性<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 绑定一个属性 --&gt;</span><br><span class="line">&lt;img v-bind:src=<span class="string">"imageSrc"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 缩写 --&gt;</span><br><span class="line">&lt;img :src=<span class="string">"imageSrc"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 内联字符串拼接 --&gt;</span><br><span class="line">&lt;img :src=<span class="string">"'/path/to/images/' + fileName"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- class 绑定 --&gt;</span><br><span class="line">&lt;div :class=<span class="string">"&#123; red: isRed &#125;"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :class=<span class="string">"[classA, classB]"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :class=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- style 绑定 --&gt;</span><br><span class="line">&lt;div :style=<span class="string">"&#123; fontSize: size + 'px' &#125;"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div :style=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></div></p><h2 id="data"><a href="#data" class="headerlink" title="data"></a>data</h2><p>data的具体使用：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var data = &#123;a: 1&#125;;</span><br><span class="line"></span><br><span class="line">// 直接创建一个实例</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.a // =&gt; 1</span><br><span class="line">vm.<span class="variable">$data</span> === data // =&gt; <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">// vue.extend() 中 data必须是函数</span><br><span class="line">var Component = Vue.extend(&#123;</span><br><span class="line">    data: <span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;a: 1&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div></p><p>当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例<br>被创建时 data 中存在的属性是响应式的。也就是说如果你添加一个新的属性<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.b = 1;</span><br></pre></td></tr></table></figure></div></p><p>那么对 b 的改动将不会触发任何视图的更新。</p><p>如果你知道你会在晚些时候需要一个属性，但是一开始它为空或不存在，<br>那么你仅需要设置一些初始值。比如：<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    text: <span class="string">""</span>,</span><br><span class="line">    count: 0,</span><br><span class="line">    isShow: <span class="literal">false</span>,</span><br><span class="line">    list: [],</span><br><span class="line">    userInfo: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>除了 data 属性，Vue 实例暴露了一些有用的实例属性与方法。<br>它们都有前缀 $，以便与用户定义的属性区分开来。例如：$data, $refs, $props, $nextTick, $parent<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var data = &#123;a: 1&#125;;</span><br><span class="line"></span><br><span class="line">// 直接创建一个实例</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.<span class="variable">$data</span> === data // <span class="literal">true</span></span><br></pre></td></tr></table></figure></div></p><p>注意： 直接修改data中的数组不能刷新<br>解决办法：<br>数组：Vue包装了数个数组操作函数，使用这些方法去操作数组，其数据变动时会被vue监测<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// js原有函数</span><br><span class="line">push()      //添加一个元素到末尾</span><br><span class="line">pop()       //移除最后一个元素</span><br><span class="line"><span class="built_in">shift</span>()     //删除第一个元素</span><br><span class="line">unshift()   //向数组开头添加一个或多个元素</span><br><span class="line">splice()    //删除或替换数组中元素</span><br><span class="line">sort()      //对数组进行排序</span><br><span class="line">reverse()   //用于颠倒数组中元素顺序</span><br></pre></td></tr></table></figure></div></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>类型：Function<br>作用：每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如需要设置数据监听、编译模板、挂载实例到 DOM、在数据变化时更新 DOM 等。同时在这个过程中也会运行一些叫做生命周期钩子的函数，给予用户机会在一些特定的场景下添加他们自己的代码。</p><p>一句话总结：在对应的周期函数，写对应的代码，实现对应的效果。</p><p><a href="http://p9sucfov3.bkt.clouddn.com/clipboard.png" data-fancybox="group" data-caption="image" class="fancybox"><img src="http://p9sucfov3.bkt.clouddn.com/clipboard.png" alt="image" title="image"></a></p><p>总结：</p><p><a href="http://p9sucfov3.bkt.clouddn.com/clipboard2.png" data-fancybox="group" data-caption="生命周期" class="fancybox"><img src="http://p9sucfov3.bkt.clouddn.com/clipboard2.png" alt="生命周期" title="生命周期"></a></p><h2 id="Computed计算属性"><a href="#Computed计算属性" class="headerlink" title="Computed计算属性"></a>Computed计算属性</h2><p>type: Object</p><p>computed相当于属性的一个实时计算，如果实时计算里关联了对象，那么当对象的某个值改变的时候，同时会触发实时计算。</p><h3 id="计算属性的缓存"><a href="#计算属性的缓存" class="headerlink" title="计算属性的缓存"></a>计算属性的缓存</h3><p>计算属性具有缓存。计算属性是基于它们的依赖进行缓存的。<br>计算属性只有在它的相关依赖发生改变时才会重新求值。<br>这就意味着只要以下isShow,age,sex,disabled都没有发生改变，多次访问 nowMoney计算属性会立即返回之前的计算结果，而不必再次执行函数。<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">test</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> this.isShow &amp;&amp; this.age&gt;20 &amp;&amp; this.sex == 1 &amp;&amp; !this.disabled;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></div></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>type：Object<br>键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。watch会观察键，当该值变化时执行特定的函数。</p><p>例如分页组件中，我们可以检测页码执行获取数据的函数。</p><p>注意：<br>    1.回调函数默认会传入两个参数，新值和旧值<br>    2.当观察的数据为对象或数组时，curVal和oldVal是相等的，因为这两个形参指向的是同一个数据对象<br>    3.观察的键为对象时，需添加属性deep: true，否则无法触发回调<br><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    //监听简单数据类型</span><br><span class="line">    example0(newVal,oldVal)&#123;</span><br><span class="line">        console.log(`新值是：<span class="variable">$&#123;newVal&#125;</span>,旧值是：<span class="variable">$&#123;oldVal&#125;</span>`)</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    //监听复杂数据类型</span><br><span class="line">    example1:&#123;</span><br><span class="line">        deep: <span class="literal">true</span>, </span><br><span class="line">         handler(val)&#123;</span><br><span class="line">            console.log(val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束~~"></a>结束~~</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
